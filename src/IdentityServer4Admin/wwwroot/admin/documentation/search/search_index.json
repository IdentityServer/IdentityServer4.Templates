{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"This documentation will clearly show you how to undertake all IdentityServer configuration tasks: Including authorizing new client applications by application type Configure protected identity resources Manage users and assigning them identity roles and identity claims. After reading these documents, you will also understand how to deploy the AdminUI using Docker, IIS Azure including download, configuration and installation. The IdentityExpress AdminUI consists of two sites: the UI, and the backend API. For additonal support email support@identityserver.com","title":"About"},{"location":"Access_Policy/Access_Policy.html","text":"Introduction Access Policy maps claim value\u2019s to permissions, each time a user attempts to perform some administrator functionality their claims are evaluated against the policy to produce a set of permissions. Only if they have the appropriate permission will they be able to execute the functionality.","title":"Access Policy"},{"location":"Access_Policy/Access_Policy.html#introduction","text":"Access Policy maps claim value\u2019s to permissions, each time a user attempts to perform some administrator functionality their claims are evaluated against the policy to produce a set of permissions. Only if they have the appropriate permission will they be able to execute the functionality.","title":"Introduction"},{"location":"Access_Policy/Managing_your_access_policy.html","text":"In order to manage your access policy, you will need to have the \u2018All\u2019 permission. Access Policy Management is available in the Settings tab, new policies can be added and removed here. After making any changes you will need to save your changes in order for them to take effect. To make use of this new policy, you will need to give this new claim to a user. Users can get permissions from multiple access policy statements. Only users with the \u2018All\u2019 permission are able to assign claims referenced in the access policy to themselves or other users. Warning Any user that already has the claim in the access policy you are adding will be given the permission. This is also true if an access policy is removed, where any users with that claim will lose that permission.","title":"Managing your Access Policy"},{"location":"Access_Policy/Permissions.html","text":"Users without any permissions will be greeted with an unauthorized screen after logging in. Currently, there are three permissions available, each giving access to different actions within AdminUI: User Manager This permission grants control over User and Role management Identity Server Manager This permission allows users to create and modify ClaimTypes, Clients, Identity Resources, and Protected Resources All This permission allows all of the above and control over Access Policy Management By default, the 'AdminUI Administrator' role is set up by default with the All permission. This mapping cannot be removed.","title":"Permissions"},{"location":"Audit/Audit_Language.html","text":"Audit records will be written using current machine culture, assuming the culture is one of the languages supported by AdminUI. English en (fallback) French fr German de Spanish es Simplified Chinese zh-CN Taiwanese Chinese zh-TW If you wish to change the language set the following option in the app settings file AuditRecordsConnectionString to one of the supported languages above.","title":"Audit Language"},{"location":"Audit/Auditing_Database.html","text":"By default, the same connection string will be used for audit records that is configured for IdentityServer configuration. You can change it via the app settings file to another database. Set the option AuditRecordsConnectionString in the configuration file to use an alternative database.","title":"Auditing Database"},{"location":"Audit/IdentityServer_Auditing.html","text":"Events that happen inside IdentityServer can be recorded into the same audit database as AdminUI, providing a single view of all Identity related events.","title":"IdentityServer Auditing"},{"location":"Audit/View_Audit_Events.html","text":"Audit records can either be viewed through the main navigation bar option Auditing. On this page you can: Filter audit records Time based Source, Origin of the audit event Action, the action of the event Resource, the entity the action was applied to Source, the entity performing the action Download audit records in CSV format To view audit records you need to either have the Auditing permission or All permission.","title":"View Audit Events"},{"location":"Claim_Types/Creating_claims.html","text":"Create Claim To create a Claim from the Claim Types interface, click \"New Claim Type\" from this tab. A new Claim Type dialog will appear enabling you to add the claim type details you require: Claim Type Option You will be able to edit the Claim Type option from within the Add Claim Type dialog, to choose the datatype of the Claim Add Another Claim At this point, you can use whether to continue or to add another Claim Type. If you choose to add another Claim Type straight after the current user, slide the switch to \"Add Another Claim Type After Submit\" and a fresh dialogue will appear once you have clicked \"Add\": Save New Claim Type Once you have entered all the Claim Type details, you should observe a Claim Type success dialog","title":"Creating Claims"},{"location":"Claim_Types/Creating_claims.html#create-claim","text":"To create a Claim from the Claim Types interface, click \"New Claim Type\" from this tab. A new Claim Type dialog will appear enabling you to add the claim type details you require:","title":"Create Claim"},{"location":"Claim_Types/Creating_claims.html#claim-type-option","text":"You will be able to edit the Claim Type option from within the Add Claim Type dialog, to choose the datatype of the Claim","title":"Claim Type Option"},{"location":"Claim_Types/Creating_claims.html#add-another-claim","text":"At this point, you can use whether to continue or to add another Claim Type. If you choose to add another Claim Type straight after the current user, slide the switch to \"Add Another Claim Type After Submit\" and a fresh dialogue will appear once you have clicked \"Add\":","title":"Add Another Claim"},{"location":"Claim_Types/Creating_claims.html#save-new-claim-type","text":"Once you have entered all the Claim Type details, you should observe a Claim Type success dialog","title":"Save New Claim Type"},{"location":"Claim_Types/Deleting_claims.html","text":"Deleting a Claim Type During the Edit Claim Types dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Claim Type. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting Claims"},{"location":"Claim_Types/Deleting_claims.html#deleting-a-claim-type","text":"During the Edit Claim Types dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Claim Type. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting a Claim Type"},{"location":"Claim_Types/Editing_claims.html","text":"Selecting a Claim Type Access the Claim Type Details by finding the Claim Type you want to edit in the Claim Types list. Editing a Claim Type Once you have found your required Claim Type to edit, click the pencil at the end of the row. Claims that cannot be edited will be marked as reserved as they are integral to IdentityServer functionality: Claim Type Details This will take you to the Claim Type Details screen, where you can edit the required Claim Type details. You will notice that there are several key tabs, which we will cover in detail. An example is editing a \"birthdate\" claim type: You will observe the fields available to edit include Type, Regex Rule, Required Claim, Name, Description, and whether the claim is a Required Claim. There is the option to Save the updated changes, or to Delete the Claim Type, which will be covered in more detail. Unsaved Changes At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes. Successful Claim Type Details Edit Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Claim Type immediately.","title":"Editing Claims"},{"location":"Claim_Types/Editing_claims.html#selecting-a-claim-type","text":"Access the Claim Type Details by finding the Claim Type you want to edit in the Claim Types list.","title":"Selecting a Claim Type"},{"location":"Claim_Types/Editing_claims.html#editing-a-claim-type","text":"Once you have found your required Claim Type to edit, click the pencil at the end of the row. Claims that cannot be edited will be marked as reserved as they are integral to IdentityServer functionality:","title":"Editing a Claim Type"},{"location":"Claim_Types/Editing_claims.html#claim-type-details","text":"This will take you to the Claim Type Details screen, where you can edit the required Claim Type details. You will notice that there are several key tabs, which we will cover in detail. An example is editing a \"birthdate\" claim type: You will observe the fields available to edit include Type, Regex Rule, Required Claim, Name, Description, and whether the claim is a Required Claim. There is the option to Save the updated changes, or to Delete the Claim Type, which will be covered in more detail.","title":"Claim Type Details"},{"location":"Claim_Types/Editing_claims.html#unsaved-changes","text":"At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes.","title":"Unsaved Changes"},{"location":"Claim_Types/Editing_claims.html#successful-claim-type-details-edit","text":"Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Claim Type immediately.","title":"Successful Claim Type Details Edit"},{"location":"Claim_Types/Searching_for_claims.html","text":"Searching Claims You can find Claims in the application in several ways, starting with the Search functionality. Start typing and the Claim will appear if there is a match. No Claims Found If no Claims are present, an informative message will show this. Successful Claims Find You should be able to find the Claim you require using the functionality described above.","title":"Searching for Claims"},{"location":"Claim_Types/Searching_for_claims.html#searching-claims","text":"You can find Claims in the application in several ways, starting with the Search functionality. Start typing and the Claim will appear if there is a match.","title":"Searching Claims"},{"location":"Claim_Types/Searching_for_claims.html#no-claims-found","text":"If no Claims are present, an informative message will show this.","title":"No Claims Found"},{"location":"Claim_Types/Searching_for_claims.html#successful-claims-find","text":"You should be able to find the Claim you require using the functionality described above.","title":"Successful Claims Find"},{"location":"Clients/Adding_Clients.html","text":"Add A Client From the Clients page, click the \"Add a Client\" button Client Type Choose the client type you require from the 3 available options: Single Page Application Client side application Web Application Server side application Robot Machine-to-machine Proceed with the required Client and follow instructions for each client type. Cancelling If you press cancel after choosing the Client type to add, you will be returned to the client choice page. Data is not persisted between client types.","title":"Adding Clients"},{"location":"Clients/Adding_Clients.html#add-a-client","text":"From the Clients page, click the \"Add a Client\" button","title":"Add A Client"},{"location":"Clients/Adding_Clients.html#client-type","text":"Choose the client type you require from the 3 available options: Single Page Application Client side application Web Application Server side application Robot Machine-to-machine Proceed with the required Client and follow instructions for each client type.","title":"Client Type"},{"location":"Clients/Adding_Clients.html#cancelling","text":"If you press cancel after choosing the Client type to add, you will be returned to the client choice page. Data is not persisted between client types.","title":"Cancelling"},{"location":"Clients/Adding_a_SPA_client.html","text":"Adding a Single Page Application From the Add a Client workflow, if you choose to setup a Single Page application, you will see a dialogue enabling you to add the following: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI Click next once all details have been filled in as required: SPA Callback Url You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS: SPA Logout Url You will next be asked to enter a Post-Logout URL. This is optional and you can configure more after setup - it is where users can be returned to after logging out. This must be HTTPS: SPA Identity Resources You will next be asked to select the Identity Resources that this client can access: SPA Protected Resources At this point, you can now choose the Protected Resources that this client can access: SPA Details Review You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details Back If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process: Success Once clicking submit, you will have successfully added a SPA Client. HTTPS If the Logo URL , the application Logo that will be seen on Consent Screens, is not HTTPS, then it will not display. The Callback URL and Logout URL must also be HTTPS.","title":"Adding a SPA Client"},{"location":"Clients/Adding_a_SPA_client.html#adding-a-single-page-application","text":"From the Add a Client workflow, if you choose to setup a Single Page application, you will see a dialogue enabling you to add the following: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI Click next once all details have been filled in as required:","title":"Adding a Single Page Application"},{"location":"Clients/Adding_a_SPA_client.html#spa-callback-url","text":"You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS:","title":"SPA Callback Url"},{"location":"Clients/Adding_a_SPA_client.html#spa-logout-url","text":"You will next be asked to enter a Post-Logout URL. This is optional and you can configure more after setup - it is where users can be returned to after logging out. This must be HTTPS:","title":"SPA Logout Url"},{"location":"Clients/Adding_a_SPA_client.html#spa-identity-resources","text":"You will next be asked to select the Identity Resources that this client can access:","title":"SPA Identity Resources"},{"location":"Clients/Adding_a_SPA_client.html#spa-protected-resources","text":"At this point, you can now choose the Protected Resources that this client can access:","title":"SPA Protected Resources"},{"location":"Clients/Adding_a_SPA_client.html#spa-details-review","text":"You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details","title":"SPA Details Review"},{"location":"Clients/Adding_a_SPA_client.html#back","text":"If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process:","title":"Back"},{"location":"Clients/Adding_a_SPA_client.html#success","text":"Once clicking submit, you will have successfully added a SPA Client.","title":"Success"},{"location":"Clients/Adding_a_SPA_client.html#https","text":"If the Logo URL , the application Logo that will be seen on Consent Screens, is not HTTPS, then it will not display. The Callback URL and Logout URL must also be HTTPS.","title":"HTTPS"},{"location":"Clients/Adding_a_Saml_client.html","text":"Setting up a SAML Client with AdminUI and SAML2P In order to set up a new SAML Service Provider client you will need to Navigate to /clients and click the \"Add Client\" button and select SAML Service Provider from the list of client types. *Note you will need a license for SAML2P in order to integrate with a SAML Client. You can get a demo license by visiting our SAML2P product page If you have a SAML metadata document from the SAML Identity Provider you are connecting to, you can fill in most of these fields using that. Name Type Description EntityID SAML Entity ID SAML Entity ID (This will be in the metadata document) DisplayName Client display name Client Display Name used in AdminUI, this has no effect on the Client itself Description (Optional) Description of the client Description of the Client, may be left blank. ASC Endpoint (http:// or https://) AssertionConsumerService AssertionConsumerService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. SLO Endpoint (Optional) (http:// or https://) SingleLogoutService SingleLogoutService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. *ACS/SLO Endpoints are required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production for security. If additional ACS/SLO Endpoints are required, they may be set after Client creation in the Client Configuration pages. Find out more info on how to configure a SAML Client The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen allows you to view the summary of the proposed client application and make any appropriate changes. Configuring a SAML Client. Once a SAML Client has been created it can be further configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify ACS/SLO Endpoints and access audits specific to the Client. The SAML tab contains the Clients SAML specific settings; Name Description ACS Endpoints Add, remove or edit ACS endpoints SLO Endpoints Add, remove or edit SLO endpoints Claims Mappings Map AdminUI Claim Types to Saml ClaimTypes Request Add, remove and configure signing certificates Response Add, replace or remove and configure an encryption certificate To find out about all of the possible configurable options for a SAML Service Provider, vist our SAML2P documentation","title":"Adding a SAML Client"},{"location":"Clients/Adding_a_Saml_client.html#setting-up-a-saml-client-with-adminui-and-saml2p","text":"In order to set up a new SAML Service Provider client you will need to Navigate to /clients and click the \"Add Client\" button and select SAML Service Provider from the list of client types. *Note you will need a license for SAML2P in order to integrate with a SAML Client. You can get a demo license by visiting our SAML2P product page If you have a SAML metadata document from the SAML Identity Provider you are connecting to, you can fill in most of these fields using that. Name Type Description EntityID SAML Entity ID SAML Entity ID (This will be in the metadata document) DisplayName Client display name Client Display Name used in AdminUI, this has no effect on the Client itself Description (Optional) Description of the client Description of the Client, may be left blank. ASC Endpoint (http:// or https://) AssertionConsumerService AssertionConsumerService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. SLO Endpoint (Optional) (http:// or https://) SingleLogoutService SingleLogoutService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. *ACS/SLO Endpoints are required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production for security. If additional ACS/SLO Endpoints are required, they may be set after Client creation in the Client Configuration pages. Find out more info on how to configure a SAML Client The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen allows you to view the summary of the proposed client application and make any appropriate changes.","title":"Setting up a SAML Client with AdminUI and SAML2P"},{"location":"Clients/Adding_a_Saml_client.html#configuring-a-saml-client","text":"Once a SAML Client has been created it can be further configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify ACS/SLO Endpoints and access audits specific to the Client. The SAML tab contains the Clients SAML specific settings; Name Description ACS Endpoints Add, remove or edit ACS endpoints SLO Endpoints Add, remove or edit SLO endpoints Claims Mappings Map AdminUI Claim Types to Saml ClaimTypes Request Add, remove and configure signing certificates Response Add, replace or remove and configure an encryption certificate To find out about all of the possible configurable options for a SAML Service Provider, vist our SAML2P documentation","title":"Configuring a SAML Client."},{"location":"Clients/Adding_a_WsFed_client.html","text":"Setting up a WS-Federation Relying Party In order to set up a new WS-Federation Relying Party Provider client, you will need to navigate to the /clients and click the \u2018Add Client\u2019 button and select \u2018WS-Fed Replying Party\u2019 from the list of client types. Please note that you will need a license for WS-Federation in order to integrate with the WS-Federation Relying Party. You can get a demo license by visiting our Ws-Fed product page . The unique WS-fed wizard screens will contain the following fields: Name Type Description Realm String value registered Unique name for the client Display name Client display name Has no effect no the client itself, will be displayed on the user consent screen Description (optional) Description of the client Callback Url (http:// or https://) A url endpoint Takes a Url for the endpoint which will be used to receive the authentication tokens e.g https://mydomain.com/sign-in The Callback Url is required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production. The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen you can view the summary of the proposed client application and make any appropriate changes. Configuring WS-Fed Client Once a WS-Fed Client has been created it can be configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify token type and access audit specific to the Client. The WS-Fed tab contains the Client\u2019s WS-Federation specific settings; Name Description Token Type Select from default, SAML 1.1 or SAML 2.0 Signature Algorithm Use the default or change to a specific RSA algorithm Digest Algorithm Use the default or change to use a specific SHA algorithm SAML Name Id Format Enter the format that will be used for the SAML name id To find out all the configurable options for a WS-Fed Service provider, check out our WS-Fed documentation","title":"Adding a WS-Fed Client"},{"location":"Clients/Adding_a_WsFed_client.html#setting-up-a-ws-federation-relying-party","text":"In order to set up a new WS-Federation Relying Party Provider client, you will need to navigate to the /clients and click the \u2018Add Client\u2019 button and select \u2018WS-Fed Replying Party\u2019 from the list of client types. Please note that you will need a license for WS-Federation in order to integrate with the WS-Federation Relying Party. You can get a demo license by visiting our Ws-Fed product page . The unique WS-fed wizard screens will contain the following fields: Name Type Description Realm String value registered Unique name for the client Display name Client display name Has no effect no the client itself, will be displayed on the user consent screen Description (optional) Description of the client Callback Url (http:// or https://) A url endpoint Takes a Url for the endpoint which will be used to receive the authentication tokens e.g https://mydomain.com/sign-in The Callback Url is required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production. The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen you can view the summary of the proposed client application and make any appropriate changes.","title":"Setting up a WS-Federation Relying Party"},{"location":"Clients/Adding_a_WsFed_client.html#configuring-ws-fed-client","text":"Once a WS-Fed Client has been created it can be configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify token type and access audit specific to the Client. The WS-Fed tab contains the Client\u2019s WS-Federation specific settings; Name Description Token Type Select from default, SAML 1.1 or SAML 2.0 Signature Algorithm Use the default or change to a specific RSA algorithm Digest Algorithm Use the default or change to use a specific SHA algorithm SAML Name Id Format Enter the format that will be used for the SAML name id To find out all the configurable options for a WS-Fed Service provider, check out our WS-Fed documentation","title":"Configuring WS-Fed Client"},{"location":"Clients/Adding_a_robot_client.html","text":"Adding A Robot Application If you choose to Add a Robot application, you will see a dialogue enabling you to add: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Description Application description for use within AdminUI Protected Resources You will then be asked to select the Protected Resources that this client can access: Secrets You will now be able to edit and add the secrets that are available to this Web Client: You can select a Secret Type of either a Shared Secret , an X509 Certificate Thumbprint or an X509 Certificate Name . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will appear in the list below:","title":"Adding a Robot Client"},{"location":"Clients/Adding_a_robot_client.html#adding-a-robot-application","text":"If you choose to Add a Robot application, you will see a dialogue enabling you to add: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Description Application description for use within AdminUI","title":"Adding A Robot Application"},{"location":"Clients/Adding_a_robot_client.html#protected-resources","text":"You will then be asked to select the Protected Resources that this client can access:","title":"Protected Resources"},{"location":"Clients/Adding_a_robot_client.html#secrets","text":"You will now be able to edit and add the secrets that are available to this Web Client: You can select a Secret Type of either a Shared Secret , an X509 Certificate Thumbprint or an X509 Certificate Name . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will appear in the list below:","title":"Secrets"},{"location":"Clients/Adding_a_web_client.html","text":"Adding a Web Application If you choose to Add a Web application, you will see a dialogue enabling you to add: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI Callback Url You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS: Logout Url You will next be asked to enter a Logout URL: Secrets You will now be able to edit and add the secrets that are available to this Web Client: You can select a Secret Type of either a Shared Secret , an X509 Certificate Thumbprint or an X509 Certificate Name . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will appear in the list below: Protected Resources You will then be asked to select the Protected Resources that this client can access: Details Review You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details Back If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process: Success You have now successfully added a Web Client.","title":"Adding a Web Client"},{"location":"Clients/Adding_a_web_client.html#adding-a-web-application","text":"If you choose to Add a Web application, you will see a dialogue enabling you to add: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI","title":"Adding a Web Application"},{"location":"Clients/Adding_a_web_client.html#callback-url","text":"You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS:","title":"Callback Url"},{"location":"Clients/Adding_a_web_client.html#logout-url","text":"You will next be asked to enter a Logout URL:","title":"Logout Url"},{"location":"Clients/Adding_a_web_client.html#secrets","text":"You will now be able to edit and add the secrets that are available to this Web Client: You can select a Secret Type of either a Shared Secret , an X509 Certificate Thumbprint or an X509 Certificate Name . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will appear in the list below:","title":"Secrets"},{"location":"Clients/Adding_a_web_client.html#protected-resources","text":"You will then be asked to select the Protected Resources that this client can access:","title":"Protected Resources"},{"location":"Clients/Adding_a_web_client.html#details-review","text":"You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details","title":"Details Review"},{"location":"Clients/Adding_a_web_client.html#back","text":"If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process:","title":"Back"},{"location":"Clients/Adding_a_web_client.html#success","text":"You have now successfully added a Web Client.","title":"Success"},{"location":"Clients/Clients.html","text":"To access the Clients section, either select \"IdentityServer Configuraiton\" from the Homepage of the Admin UI application, select the \"Clients\" tab or navigate to the \"/clients\" route. You can then carry out the following client administration tasks.","title":"Clients"},{"location":"Clients/Deleting_clients.html","text":"Delete Clients During the Edit Clients dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Client. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting Clients"},{"location":"Clients/Deleting_clients.html#delete-clients","text":"During the Edit Clients dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Client. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Delete Clients"},{"location":"Clients/Editing_clients.html","text":"Selecting a Client Access the Client Details by finding the Client you want to edit in the Clients list Editing a Client Once you have found your required Client to edit, click the pencil at the end of the row Editing Client Details This will take you to the Client Details screen, where you can edit the required Client Details. You will notice that there are several key tabs, which we will cover in detail. An example is editing an Admin UI Client: You will observe the tabs available to edit are Details , Resources , Application URLs and Advanced . On the Details tab, there is a display of the following: Client ID Readonly display of the Unique identifier Display URL Application URL that will be seen on Consent Screens Display Name Application name that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens (Must be HTTPS) Description Application description for use within AdminUI Status The status of the Client (e.g. Disabled/Enabled) There is the option to Save the updated changes, or to Delete the Client, which will be covered in more detail later. Unsaved Changes At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes. Editing Client Resources It is possible to assign and unassign Client Resources via the Resources tab of the Client Details Edit page. Click the Client \"Resources\" tab: You will then be able to switch between either Protected Resources or Identity Resources. Assigning Client Resources To assign Client Resources, after selecting either the Protected Resources or Identity Resources button, you will see a dialogue used throughout AdminUI that allows you to assign or unassign resources via clicking the arrow: Successful Client Details Edit Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Client immediately. Updating Application URLs Through the Client interface on the Application URLs tab, you will see the option to updated Application URLs. You can add a new URL via the text-box, and the \"plus\" button icon to add to the list of Application URLs. There are several options for each URL: Callback can send tokens to this URL Signout can redirect to this URL after signout CORS Domain that can make cross-origin requests Advanced Tokens Configuration Tokens can be configured further via the Advanced Screen. Advanced Claims Configuration Claims can be configured via the Advanced tab by selecting Claims. Advanced Restrictions Configuration Restrictions configuration can be added via the Advanced Clients tab.","title":"Editing Clients"},{"location":"Clients/Editing_clients.html#selecting-a-client","text":"Access the Client Details by finding the Client you want to edit in the Clients list","title":"Selecting a Client"},{"location":"Clients/Editing_clients.html#editing-a-client","text":"Once you have found your required Client to edit, click the pencil at the end of the row","title":"Editing a Client"},{"location":"Clients/Editing_clients.html#editing-client-details","text":"This will take you to the Client Details screen, where you can edit the required Client Details. You will notice that there are several key tabs, which we will cover in detail. An example is editing an Admin UI Client: You will observe the tabs available to edit are Details , Resources , Application URLs and Advanced . On the Details tab, there is a display of the following: Client ID Readonly display of the Unique identifier Display URL Application URL that will be seen on Consent Screens Display Name Application name that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens (Must be HTTPS) Description Application description for use within AdminUI Status The status of the Client (e.g. Disabled/Enabled) There is the option to Save the updated changes, or to Delete the Client, which will be covered in more detail later.","title":"Editing Client Details"},{"location":"Clients/Editing_clients.html#unsaved-changes","text":"At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes.","title":"Unsaved Changes"},{"location":"Clients/Editing_clients.html#editing-client-resources","text":"It is possible to assign and unassign Client Resources via the Resources tab of the Client Details Edit page. Click the Client \"Resources\" tab: You will then be able to switch between either Protected Resources or Identity Resources.","title":"Editing Client Resources"},{"location":"Clients/Editing_clients.html#assigning-client-resources","text":"To assign Client Resources, after selecting either the Protected Resources or Identity Resources button, you will see a dialogue used throughout AdminUI that allows you to assign or unassign resources via clicking the arrow:","title":"Assigning Client Resources"},{"location":"Clients/Editing_clients.html#successful-client-details-edit","text":"Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Client immediately.","title":"Successful Client Details Edit"},{"location":"Clients/Editing_clients.html#updating-application-urls","text":"Through the Client interface on the Application URLs tab, you will see the option to updated Application URLs. You can add a new URL via the text-box, and the \"plus\" button icon to add to the list of Application URLs. There are several options for each URL: Callback can send tokens to this URL Signout can redirect to this URL after signout CORS Domain that can make cross-origin requests","title":"Updating Application URLs"},{"location":"Clients/Editing_clients.html#advanced-tokens-configuration","text":"Tokens can be configured further via the Advanced Screen.","title":"Advanced Tokens Configuration"},{"location":"Clients/Editing_clients.html#advanced-claims-configuration","text":"Claims can be configured via the Advanced tab by selecting Claims.","title":"Advanced Claims Configuration"},{"location":"Clients/Editing_clients.html#advanced-restrictions-configuration","text":"Restrictions configuration can be added via the Advanced Clients tab.","title":"Advanced Restrictions Configuration"},{"location":"Clients/Searching_for_clients.html","text":"Searching Clients You can find Clients in the application using the Search functionality. Start typing and the client will appear if there is a match. No Clients Found If no Clients are present, an informative message will show this. Successful Client Find You should be able to find the Client you require using the steps above.","title":"Searching for Clients"},{"location":"Clients/Searching_for_clients.html#searching-clients","text":"You can find Clients in the application using the Search functionality. Start typing and the client will appear if there is a match.","title":"Searching Clients"},{"location":"Clients/Searching_for_clients.html#no-clients-found","text":"If no Clients are present, an informative message will show this.","title":"No Clients Found"},{"location":"Clients/Searching_for_clients.html#successful-client-find","text":"You should be able to find the Client you require using the steps above.","title":"Successful Client Find"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html","text":"Before AdminUI can be started, we must first configure it to our environment. This includes configuring settings such as the location of your IdentityServer and your Identity databases. AdminUI reads configuration values from the environment it is running in. For example, you can set configuration settings in your docker-compose.yml file, your web.config or even your Windows account's environment variables. Whatever ASP.NET Core can load in as environment variables, AdminUI can use. AdminUI Configuration Settings (UI) web.config or Docker Compose AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container) env.js AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container) AddUserPassword Allows for settings user passwords on creation (this is for demo purposes only, do not use in production), see more here AdminUI Configuration Settings (API) DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql AdminUI requires the MySQL setting lower_case_table_names to be false PostgreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) OperationalConnectionString (Optional) The connection string for the Presisted Grants DbContext, if not supplied AdminUI will use the IdentityServerConnectionString AuthorityUrl Url of the IdentityServer installation protecting the UI UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production RunIdentityMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for ASP.NET Identity DbContext's. This is recommended. RunIdentityServerMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for IdentityServer DbContext's. This is useful if you have a new instance of IdentityServer currently without databases. IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString). LoggingMinimumLevel Minimum level of logging ( debug , info , warning , error , or critical ). Defaults to info LoggingOutputTemplate Output format of logs, please see the Formatting plain text section of the Serilog documentation if you wish to modify this. Defaults to [{Timestamp:dd-MM-yyyy HH:mm:ss} {Level}] {Message}{NewLine}{Exception} UseLegacyPaging Allows support for legacy databases such as SQL Server 2008 LicenseKey The full license key for AdminUI PasswordPolicy:RequireDigit defaults to true PasswordPolicy:RequireLowercase defaults to true PasswordPolicy:RequireNonAlphanumeric defaults to true PasswordPolicy:RequireUppercase defaults to true PasswordPolicy:RequiredLength defaults to 6 PasswordPolicy:RequiredUniqueChars defaults to 1 UsernamePolicy:AllowedUserNameCharacters defaults to abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+ UsernamePolicy:RequireUniqueEmail defaults to true AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI","title":"Configuring AdminUI"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#adminui-configuration-settings-ui","text":"","title":"AdminUI Configuration Settings (UI)"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#webconfig-or-docker-compose","text":"AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container)","title":"web.config or Docker Compose"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#envjs","text":"AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container) AddUserPassword Allows for settings user passwords on creation (this is for demo purposes only, do not use in production), see more here","title":"env.js"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#adminui-configuration-settings-api","text":"DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql AdminUI requires the MySQL setting lower_case_table_names to be false PostgreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) OperationalConnectionString (Optional) The connection string for the Presisted Grants DbContext, if not supplied AdminUI will use the IdentityServerConnectionString AuthorityUrl Url of the IdentityServer installation protecting the UI UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production RunIdentityMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for ASP.NET Identity DbContext's. This is recommended. RunIdentityServerMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for IdentityServer DbContext's. This is useful if you have a new instance of IdentityServer currently without databases. IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString). LoggingMinimumLevel Minimum level of logging ( debug , info , warning , error , or critical ). Defaults to info LoggingOutputTemplate Output format of logs, please see the Formatting plain text section of the Serilog documentation if you wish to modify this. Defaults to [{Timestamp:dd-MM-yyyy HH:mm:ss} {Level}] {Message}{NewLine}{Exception} UseLegacyPaging Allows support for legacy databases such as SQL Server 2008 LicenseKey The full license key for AdminUI PasswordPolicy:RequireDigit defaults to true PasswordPolicy:RequireLowercase defaults to true PasswordPolicy:RequireNonAlphanumeric defaults to true PasswordPolicy:RequireUppercase defaults to true PasswordPolicy:RequiredLength defaults to 6 PasswordPolicy:RequiredUniqueChars defaults to 1 UsernamePolicy:AllowedUserNameCharacters defaults to abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+ UsernamePolicy:RequireUniqueEmail defaults to true AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI","title":"AdminUI Configuration Settings (API)"},{"location":"Configuration_and_Integration/Enabling_Logging.html","text":"The first step for any troubleshooting with AdminUI is to enable logging. The best place for this is in the API site. By default, this application outputs to the console, which most hosting options can read from. Logging with IIS or Azure If you are running AdminUI under IIS, you can capture these logs by going into your site's configuration (either using the web.config or IIS configuration manager) and setting the stdoutLogEnabled attribute to true . This attribute is found in: system.webServer aspNetCore. The location of these logs is controlled by the stdoutLogFile attribute on the same element. Please ensure that the folder structure for this location exists and your IIS site has permissions to write to this folder. Logging with Docker When using Docker, any logs from the UI or API sites should automatically be picked up by the Docker logging sink. As a result, AdminUI should work fine with the Docker logging system of your choice.","title":"Enabling Logging"},{"location":"Configuration_and_Integration/Enabling_Logging.html#logging-with-iis-or-azure","text":"If you are running AdminUI under IIS, you can capture these logs by going into your site's configuration (either using the web.config or IIS configuration manager) and setting the stdoutLogEnabled attribute to true . This attribute is found in: system.webServer aspNetCore. The location of these logs is controlled by the stdoutLogFile attribute on the same element. Please ensure that the folder structure for this location exists and your IIS site has permissions to write to this folder.","title":"Logging with IIS or Azure"},{"location":"Configuration_and_Integration/Enabling_Logging.html#logging-with-docker","text":"When using Docker, any logs from the UI or API sites should automatically be picked up by the Docker logging sink. As a result, AdminUI should work fine with the Docker logging system of your choice.","title":"Logging with Docker"},{"location":"Configuration_and_Integration/Integrating_with_IdentityServer.html","text":"If you have been following the IdentityServer Quickstarts whilst you are evaluating the framework, you can easily integrate AdminUI using the instructions below. Using the Quickstarts that build upon the ASP.NET Core Identity Visual Studio templates is not recommended for production scenarios, due to their fragility and abuse of anti-patterns. AdminUI uses a custom ASP.NET Core Identity schema. This schema extends from the ASP.NET Core Identity Entity Framework defaults, meaning any registration, password reset or login functionality you might already have, will continue to work with the AdminUI user store. However, any existing users will need to be exported to use the AdminUI schema. For more details, see the Migrating to the IdentityExpress Identity Schema section of this article. This schema is available in the nuget package IdentityExpress.Identity . Check out the Admin UI IdentityServer integration example for a working IdentityServer installation using this nuget package and schema. Existing installations of IdentityServer need no changes, as long as IdentityServer and AdminUI are using the same database. For migrating users to the AdminUI identity schema, we support the automatic migration of users from the ASP.NET Core Identity Entity Framework schema. A migration will be attempted on first run of AdminUI if the following conditions are met: The database for IdentityConnectionString has no users The configuration setting IdentityDatabaseToMigrateConnectionString is set The IdentityConnectionString and IdentityDatabaseToMigrateConnectionString are not equal To use the IdentityExpress Identity schema used by AdminUI, you simply need to update your existing ASP.NET Identity registrations to look like the following: // Register Identity using IdentityExpress entities and stores services.AddIdentity IdentityExpressUser, IdentityExpressRole () .AddUserStore IdentityExpressUserStore () .AddRoleStore IdentityExpressRoleStore () .AddIdentityExpressUserClaimsPrincipalFactory(); // Register the DbContext for the IdentityExpress schema services.AddDbContext IdentityExpressDbContext (); Or you can use our shortcut extension method: services.AddIdentityExpressAdminUiConfiguration() .AddIdentityExpressUserClaimsPrincipalFactory(); Any existing registrations for SignInManager 's, or usages of IdentityUser , should also be updated.","title":"Integrating with Identity Server"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html","text":"If you have been following the IdentityServer Quickstarts whilst you are evaluating the framework, you can easily integrate AdminUI using the instructions below. Using the Quickstarts that build upon the ASP.NET Core Identity Visual Studio templates is not recommended for production scenarios, due to their fragility and abuse of anti-patterns. Update Your Packages If you have downloaded the code straight from the samples repository, ensure all packages are up to date (excluding pre-releases). Required Packages To get started, you're going to need the AdminUI ASP.NET Core Identity schema. This simply builds upon the defaults found in the ASP.NET Core Identity Entity Framework library. To install this package either use the nuget package manager console with: install-package IdentityExpress.Identity or search the package manager for IdentityExpress.Identity . Registration Usage Changes We'll now need to swap some of the base entities with AdminUI/IdentityServer specifics. Please follow the below steps: Delete Models\\ApplicationUser.cs Replace all usages of ApplicationUser with IdentityExpressUser Replace all usages of IdentityRole with IdentityExpressRole Delete Data\\ApplicationDbContext.cs Replace .AddEntityFrameworkStores IdentityExpressDbContext () with .AddUserStore IdentityExpressUserStore ().AddRoleStore IdentityExpressRoleStore () Add .AddIdentityExpressUserClaimsPrincipalFactory() to ensure user data is correctly transformed into claims Delete any ASP.NET Core Identity migrations, AdminUI must be in charge of the user store migrations Your ASP.NET Core DI registrations should now look something like the following: services.AddDbContext IdentityExpressDbContext (options = options.UseSqlServer(Configuration.GetConnectionString( DefaultConnection ))); services.AddIdentity IdentityExpressUser, IdentityExpressRole () .AddUserStore IdentityExpressUserStore () .AddRoleStore IdentityExpressRoleStore () .AddIdentityExpressUserClaimsPrincipalFactory() .AddDefaultTokenProviders();","title":"Integrating with Quickstarts"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#update-your-packages","text":"If you have downloaded the code straight from the samples repository, ensure all packages are up to date (excluding pre-releases).","title":"Update Your Packages"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#required-packages","text":"To get started, you're going to need the AdminUI ASP.NET Core Identity schema. This simply builds upon the defaults found in the ASP.NET Core Identity Entity Framework library. To install this package either use the nuget package manager console with: install-package IdentityExpress.Identity or search the package manager for IdentityExpress.Identity .","title":"Required Packages"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#registration-usage-changes","text":"We'll now need to swap some of the base entities with AdminUI/IdentityServer specifics. Please follow the below steps: Delete Models\\ApplicationUser.cs Replace all usages of ApplicationUser with IdentityExpressUser Replace all usages of IdentityRole with IdentityExpressRole Delete Data\\ApplicationDbContext.cs Replace .AddEntityFrameworkStores IdentityExpressDbContext () with .AddUserStore IdentityExpressUserStore ().AddRoleStore IdentityExpressRoleStore () Add .AddIdentityExpressUserClaimsPrincipalFactory() to ensure user data is correctly transformed into claims Delete any ASP.NET Core Identity migrations, AdminUI must be in charge of the user store migrations Your ASP.NET Core DI registrations should now look something like the following: services.AddDbContext IdentityExpressDbContext (options = options.UseSqlServer(Configuration.GetConnectionString( DefaultConnection ))); services.AddIdentity IdentityExpressUser, IdentityExpressRole () .AddUserStore IdentityExpressUserStore () .AddRoleStore IdentityExpressRoleStore () .AddIdentityExpressUserClaimsPrincipalFactory() .AddDefaultTokenProviders();","title":"Registration &amp; Usage Changes"},{"location":"IdentityServer/What_Is_IdentityServer.html","text":"What is IdentityServer? IdentityServer is a .NET framework which allows you to develop an identity solution, using the OpenID connect protocol an extension to OAuth 2.0. Using this library you can provide a single sign on solution, a process which centralizes the authentication of your users into one location, allowing you to provide a secure and robust solution to user identity and authentication. How does AdminUI fit in? AdminUI provides a web portal for you to administer your IdentityServer solution. Using AdminUI you can perform configuration of users and clients. AdminUI will also guide you through the configuration of your identity solution, making it easier and quicker than developing code. This is only a brief overview of IdentityServer and AdminUI you may want to look at the following links for more details; Introduction to IdentityServer More information about AdminUI If you are looking for remote development support, production support, consultancy or guidance with IdentityServer, don\u2019t hesitate to contact sales@identityserver.com for a free quote.","title":"What is IdentityServer"},{"location":"IdentityServer/What_Is_IdentityServer.html#what-is-identityserver","text":"IdentityServer is a .NET framework which allows you to develop an identity solution, using the OpenID connect protocol an extension to OAuth 2.0. Using this library you can provide a single sign on solution, a process which centralizes the authentication of your users into one location, allowing you to provide a secure and robust solution to user identity and authentication.","title":"What is IdentityServer?"},{"location":"IdentityServer/What_Is_IdentityServer.html#how-does-adminui-fit-in","text":"AdminUI provides a web portal for you to administer your IdentityServer solution. Using AdminUI you can perform configuration of users and clients. AdminUI will also guide you through the configuration of your identity solution, making it easier and quicker than developing code. This is only a brief overview of IdentityServer and AdminUI you may want to look at the following links for more details; Introduction to IdentityServer More information about AdminUI If you are looking for remote development support, production support, consultancy or guidance with IdentityServer, don\u2019t hesitate to contact sales@identityserver.com for a free quote.","title":"How does AdminUI fit in?"},{"location":"Installation/Installation_Azure.html","text":"The IdentityExpress Admin UI consists of two sites: the UI, and the backend API. These then integrate with an IdentityServer installation for authentication and authorization. AdminUI Deployment AdminUI is deployed as 2 separate Azure Web Applications - one for the UI website and one for the API website. It is envisaged that they will be configured to communicate with your existing (external) identity server. Prerequisites Before beginning the installation, please ensure that you have an IdentityServer4 installation and either a MySql , PostgreSQL or SqlServer database set up. Walkthrough If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire Azure configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema. Configure a Database AdminUI currently only supports MySql , PostgreSQL and SqlServer . These can run in any azure or non-azure service. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports. Create Azure Website Initially you will want to create 2 Azure Web Apps (note this process can also be done with Azure VM's, though you will need to follow the AdminUI IIS Installation guide . One website will be for the UI and the other for the backend API. AdminAPI Configuration Once you have a Website Setup for the API, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the API are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production. RunIdentityMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for ASP.NET Identity DbContext's. This is recommended. RunIdentityServerMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for IdentityServer DbContext's. This is useful if you have a new instance of IdentityServer currently without databases. IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For a full list of configuration settings, see Configuring AdminUI . AdminUI Configuration Once you have a App Service Setup for the UI, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the UI are: AuthorityUrl Url of the IdentityServer installation. UiUrl Url of the AdminUI frontend (this Web APP). ApiUrl Url of the API setup in the previous step. In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For the UI there is an extra configuration step needed after the App Settings. Once you have configured these variables you will need to navigate to the folder that was placed in the WebApp wwwroot/assets folder and edit the env.js file in this folder. The variables in this will need to match the variables above: var ENV = { AuthorityUrl: 'Identity Server Url Here', UiUrl: 'Url of this website', ApiUrl: 'Url Setup in the previous step' }; Deploying to Azure Web App For each website you will need to FTP the folders supplied to the correct Azure folder. To achieve this you will need an FTP Client such as Filezilla. Once you have an FTP Client setup, you will need to go in to the Deployment Credentials blade of your app underneath the deployment header and setup the FTP credentials. Next go into the Properties blade underneath the Settings Header. From this blade you can grab your FTP HOST NAME. Using your FTP Client, connect to this website, from here navigate to Site - wwwroot. You will want to place the contents of the relevant folder in this wwwroot folder. Do this for both the API and the UI. Note: Any EF migrations should run on Website startup, if not you can hit the URL for the API to ensure they have ran. Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI If you extract the zip on your local machine, You can run the following command to migrate your database dotnet IdentityExpress.Manager.Api.dll -migrate all -connectionstring Server=tcp:example.database.windows.net;Database=ExampleDatabase;User ID=Username;Password=Password;Trusted_Connection=False;Encrypt=True; -dbprovider SqlServer If you want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here Troubleshooting If you're having issues, we recommend you first Enable Logging for the API Site .","title":"Azure"},{"location":"Installation/Installation_Azure.html#adminui-deployment","text":"AdminUI is deployed as 2 separate Azure Web Applications - one for the UI website and one for the API website. It is envisaged that they will be configured to communicate with your existing (external) identity server.","title":"AdminUI Deployment"},{"location":"Installation/Installation_Azure.html#prerequisites","text":"Before beginning the installation, please ensure that you have an IdentityServer4 installation and either a MySql , PostgreSQL or SqlServer database set up.","title":"Prerequisites"},{"location":"Installation/Installation_Azure.html#walkthrough","text":"If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire Azure configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema.","title":"Walkthrough"},{"location":"Installation/Installation_Azure.html#configure-a-database","text":"AdminUI currently only supports MySql , PostgreSQL and SqlServer . These can run in any azure or non-azure service. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports.","title":"Configure a Database"},{"location":"Installation/Installation_Azure.html#create-azure-website","text":"Initially you will want to create 2 Azure Web Apps (note this process can also be done with Azure VM's, though you will need to follow the AdminUI IIS Installation guide . One website will be for the UI and the other for the backend API.","title":"Create Azure Website"},{"location":"Installation/Installation_Azure.html#adminapi-configuration","text":"Once you have a Website Setup for the API, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the API are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production. RunIdentityMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for ASP.NET Identity DbContext's. This is recommended. RunIdentityServerMigrations Set to true or false if you require AdminUI to run Entity Framework migrations for IdentityServer DbContext's. This is useful if you have a new instance of IdentityServer currently without databases. IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For a full list of configuration settings, see Configuring AdminUI .","title":"AdminAPI Configuration"},{"location":"Installation/Installation_Azure.html#adminui-configuration","text":"Once you have a App Service Setup for the UI, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the UI are: AuthorityUrl Url of the IdentityServer installation. UiUrl Url of the AdminUI frontend (this Web APP). ApiUrl Url of the API setup in the previous step. In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For the UI there is an extra configuration step needed after the App Settings. Once you have configured these variables you will need to navigate to the folder that was placed in the WebApp wwwroot/assets folder and edit the env.js file in this folder. The variables in this will need to match the variables above: var ENV = { AuthorityUrl: 'Identity Server Url Here', UiUrl: 'Url of this website', ApiUrl: 'Url Setup in the previous step' };","title":"AdminUI Configuration"},{"location":"Installation/Installation_Azure.html#deploying-to-azure-web-app","text":"For each website you will need to FTP the folders supplied to the correct Azure folder. To achieve this you will need an FTP Client such as Filezilla. Once you have an FTP Client setup, you will need to go in to the Deployment Credentials blade of your app underneath the deployment header and setup the FTP credentials. Next go into the Properties blade underneath the Settings Header. From this blade you can grab your FTP HOST NAME. Using your FTP Client, connect to this website, from here navigate to Site - wwwroot. You will want to place the contents of the relevant folder in this wwwroot folder. Do this for both the API and the UI. Note: Any EF migrations should run on Website startup, if not you can hit the URL for the API to ensure they have ran.","title":"Deploying to Azure Web App"},{"location":"Installation/Installation_Azure.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI If you extract the zip on your local machine, You can run the following command to migrate your database dotnet IdentityExpress.Manager.Api.dll -migrate all -connectionstring Server=tcp:example.database.windows.net;Database=ExampleDatabase;User ID=Username;Password=Password;Trusted_Connection=False;Encrypt=True; -dbprovider SqlServer If you want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Installation/Installation_Azure.html#troubleshooting","text":"If you're having issues, we recommend you first Enable Logging for the API Site .","title":"Troubleshooting"},{"location":"Installation/Installation_Docker.html","text":"AdminUI is deployed as 2 separate Docker images - one for the UI website and one for the API website. In production, you could choose to have the UI website image and the API website image running in the same Docker container or in separate Docker containers. Either way, it is envisaged that they will be configured to communicate with your existing (external) identity server. Prerequisites Before beginning the installation, there are several aspects to consider to ensure that Docker is configured correctly. What do I need to check before I install Docker? Before beginning the installation, ensure that Docker is configured to use the following: Using Linux Containers (Windows only) - see Docker instructions on switching containers for more information Has Docker Compose installed? (to check this, type docker-compose ) Running Docker Commands on Linux If you're running Docker on a Linux host and you're having issues running these commands, check you have suitable permissions. Walkthrough This walkthrough will take you through the entire Docker configuration process, resulting in a working environment for the IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. Getting the Docker Compose File For most basic installations, we can use the Docker Compose file made available upon purchase. This would have been emailed to you after payment or at the start of your trial. The current Docker Compose file is designed to get you up and running as fast as possible, and start demoing, just run docker-compose up . It will setup 5 Docker containers: Admin UI, Admin API, a test IdentityServer, a test MySQL Database and a test client, all of which are preconfigured to communicate with each other with minimal user input. If you are looking to configure AdminUI against an existing IdentityServer then continue the walkthrough. Configuration There are multiple variables that you can configure in the compose file depending on your setup: Ports We can configure both the internal and external ports used in the docker containers. This is in the format of host:container . Please do not change the container port when using the compose file, however you are welcome to change the host port if your environment has any port clashes. Environment Variables Environment variables are also available for setting application specifics. These are set in the following format in your Docker Compose file: environment: - UiUrl=http://localhost:5000 - ApiUrl=http://localhost:5001 - AuthorityUrl=http://ids:5003 For the api container the minimum configuration required is: DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) AuthorityUrl Url of the IdentityServer installation protecting the UI UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production LicenseKey The full license key for AdminUI And for the ui container we need: AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container) The full list of configuration options is avaliable here IdentityServer Database Resolution Ensure that your IdentityServer site is either: Publicly resolvable via DNS or running locally on the Docker host machine on all network devices (e.g: http://+:5555/). If you are running locally, ensure that the AuthorityUrl setting uses the IP address of the local Docker network device. Any used databases must accept remote connections. If this database is on your Docker host machine, you can use the IP address of your Docker network device in the connection string. If you are running IdentityServer and the database locally to the Docker host machine, also ensure that your firewall allows connections on the necessary ports. Docker Login Before we can run the containers we have one final step: authentication. The docker images used for Admin UI are found in a private Docker registry, which is protected by a username and password. These credentials are supplied when you purchase AdminUI. Once you have the credentials you run: docker login identityserverregistry.azurecr.io First Run On each startup the AdminUI API Container will run ALL migrations from its entryscript. If you would like to see and/or modify which migrations run on startup please see our migration documentation . Docker Compose Now we can run the Docker Compose file using the command: docker-compose up This must be done in the location of the Docker Compose file or by providing the path using the -f flag. You should now be able to access the IdentityExpress Admin UI on http://localhost:5000 . Deploying Docker Images Separately The Admin UI and API Docker images are designed to be scaled separately. This means you can place each image on separate machines each with their own load balancing policies. Individual Docker Compose files are not available for the UI and API, however you can easily create these with a bit of Docker know-how, or use the docker run command directly. docker run identityserverregistry.azurecr.io/idxui This will run the UI image alone. A similar approach can then be taken with the API image, where the image is tagged identityserverregistry.azurecr.io/idxapi . Ports used can then be set as -p 5000:5000 and environment variables as -e \"AuthorityUrl=http://ids:5003\" Making Docker Public with a Reverse Proxy To make the Docker containers public, we first need to add a web server to the mix. This web server will act as a reverse proxy, forwarding all calls to our running Docker instances. These web servers do not need to dockerized. IIS Reverse Proxy To setup IIS to act as a reverse proxy, there are two prerequisites that need to be installed within IIS: URL Rewrite Module Application Request Routing Once these are installed we can then go to the site we want to configure and select 'URL Rewrite' found in the IIS section. We then need to use \"Add Rule(s)...\", found in the Actions section. We can then use the Reverse proxy template, found in the Inbound and Outbound Rules section. Now we need to set the Inbound Rule, telling IIS where to forward requests to. By default this would be http://localhost:5000. If your Docker container is running HTTPS, ensure you disable SSL Offloading, ensuring TLS is maintained. We also need to configure an Outbound Rule, to allow IIS to return responses from our Docker container using your site URL instead of the Docker container responding directly. Here the From address needs to be the domain of you Docker container (e.g. http://localhost:5000) and the To address you sites address (e.g. api.docker.com). FAQ Why don't my Docker commands work on Linux? Ensure you are using a user with sufficient privileges. What do I do if I experience a port clash? You may experience a scenario where you have a clash between ports in-use on your host machine and the ports specified in the docker-compose.yml file. Port mappings in the docker-compose.yml file are specified in host:container pairs. You can change the host port in any mapping but be careful to change all occurances of the usage of that host port in other environment variables used in the docker-compose.yml file. Connecting to Databases on Docker Host Machine To connect a container to a local database running on the Docker host machine, ensure you have configured the following: Enable remote connections to the database Enable firewall rule to allow connection using the configured port number Use the Docker network adapter IP address for connection strings","title":"Docker"},{"location":"Installation/Installation_Docker.html#prerequisites","text":"Before beginning the installation, there are several aspects to consider to ensure that Docker is configured correctly.","title":"Prerequisites"},{"location":"Installation/Installation_Docker.html#what-do-i-need-to-check-before-i-install-docker","text":"Before beginning the installation, ensure that Docker is configured to use the following: Using Linux Containers (Windows only) - see Docker instructions on switching containers for more information Has Docker Compose installed? (to check this, type docker-compose )","title":"What do I need to check before I install Docker?"},{"location":"Installation/Installation_Docker.html#running-docker-commands-on-linux","text":"If you're running Docker on a Linux host and you're having issues running these commands, check you have suitable permissions.","title":"Running Docker Commands on Linux"},{"location":"Installation/Installation_Docker.html#walkthrough","text":"This walkthrough will take you through the entire Docker configuration process, resulting in a working environment for the IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer.","title":"Walkthrough"},{"location":"Installation/Installation_Docker.html#getting-the-docker-compose-file","text":"For most basic installations, we can use the Docker Compose file made available upon purchase. This would have been emailed to you after payment or at the start of your trial. The current Docker Compose file is designed to get you up and running as fast as possible, and start demoing, just run docker-compose up . It will setup 5 Docker containers: Admin UI, Admin API, a test IdentityServer, a test MySQL Database and a test client, all of which are preconfigured to communicate with each other with minimal user input. If you are looking to configure AdminUI against an existing IdentityServer then continue the walkthrough.","title":"Getting the Docker Compose File"},{"location":"Installation/Installation_Docker.html#configuration","text":"There are multiple variables that you can configure in the compose file depending on your setup:","title":"Configuration"},{"location":"Installation/Installation_Docker.html#ports","text":"We can configure both the internal and external ports used in the docker containers. This is in the format of host:container . Please do not change the container port when using the compose file, however you are welcome to change the host port if your environment has any port clashes.","title":"Ports"},{"location":"Installation/Installation_Docker.html#environment-variables","text":"Environment variables are also available for setting application specifics. These are set in the following format in your Docker Compose file: environment: - UiUrl=http://localhost:5000 - ApiUrl=http://localhost:5001 - AuthorityUrl=http://ids:5003 For the api container the minimum configuration required is: DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants) AuthorityUrl Url of the IdentityServer installation protecting the UI UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production LicenseKey The full license key for AdminUI And for the ui container we need: AuthorityUrl Url of the IdentityServer installation protecting AdminUI ApiUrl Url of the AdminUI backend (the idxapi container) UiUrl Url of the AdminUI frontend (the idxui container) The full list of configuration options is avaliable here","title":"Environment Variables"},{"location":"Installation/Installation_Docker.html#identityserver-database-resolution","text":"Ensure that your IdentityServer site is either: Publicly resolvable via DNS or running locally on the Docker host machine on all network devices (e.g: http://+:5555/). If you are running locally, ensure that the AuthorityUrl setting uses the IP address of the local Docker network device. Any used databases must accept remote connections. If this database is on your Docker host machine, you can use the IP address of your Docker network device in the connection string. If you are running IdentityServer and the database locally to the Docker host machine, also ensure that your firewall allows connections on the necessary ports.","title":"IdentityServer &amp; Database Resolution"},{"location":"Installation/Installation_Docker.html#docker-login","text":"Before we can run the containers we have one final step: authentication. The docker images used for Admin UI are found in a private Docker registry, which is protected by a username and password. These credentials are supplied when you purchase AdminUI. Once you have the credentials you run: docker login identityserverregistry.azurecr.io","title":"Docker Login"},{"location":"Installation/Installation_Docker.html#first-run","text":"On each startup the AdminUI API Container will run ALL migrations from its entryscript. If you would like to see and/or modify which migrations run on startup please see our migration documentation .","title":"First Run"},{"location":"Installation/Installation_Docker.html#docker-compose","text":"Now we can run the Docker Compose file using the command: docker-compose up This must be done in the location of the Docker Compose file or by providing the path using the -f flag. You should now be able to access the IdentityExpress Admin UI on http://localhost:5000 .","title":"Docker Compose"},{"location":"Installation/Installation_Docker.html#deploying-docker-images-separately","text":"The Admin UI and API Docker images are designed to be scaled separately. This means you can place each image on separate machines each with their own load balancing policies. Individual Docker Compose files are not available for the UI and API, however you can easily create these with a bit of Docker know-how, or use the docker run command directly. docker run identityserverregistry.azurecr.io/idxui This will run the UI image alone. A similar approach can then be taken with the API image, where the image is tagged identityserverregistry.azurecr.io/idxapi . Ports used can then be set as -p 5000:5000 and environment variables as -e \"AuthorityUrl=http://ids:5003\"","title":"Deploying Docker Images Separately"},{"location":"Installation/Installation_Docker.html#making-docker-public-with-a-reverse-proxy","text":"To make the Docker containers public, we first need to add a web server to the mix. This web server will act as a reverse proxy, forwarding all calls to our running Docker instances. These web servers do not need to dockerized.","title":"Making Docker Public with a Reverse Proxy"},{"location":"Installation/Installation_Docker.html#iis-reverse-proxy","text":"To setup IIS to act as a reverse proxy, there are two prerequisites that need to be installed within IIS: URL Rewrite Module Application Request Routing Once these are installed we can then go to the site we want to configure and select 'URL Rewrite' found in the IIS section. We then need to use \"Add Rule(s)...\", found in the Actions section. We can then use the Reverse proxy template, found in the Inbound and Outbound Rules section. Now we need to set the Inbound Rule, telling IIS where to forward requests to. By default this would be http://localhost:5000. If your Docker container is running HTTPS, ensure you disable SSL Offloading, ensuring TLS is maintained. We also need to configure an Outbound Rule, to allow IIS to return responses from our Docker container using your site URL instead of the Docker container responding directly. Here the From address needs to be the domain of you Docker container (e.g. http://localhost:5000) and the To address you sites address (e.g. api.docker.com).","title":"IIS Reverse Proxy"},{"location":"Installation/Installation_Docker.html#faq","text":"","title":"FAQ"},{"location":"Installation/Installation_Docker.html#why-dont-my-docker-commands-work-on-linux","text":"Ensure you are using a user with sufficient privileges.","title":"Why don't my Docker commands work on Linux?"},{"location":"Installation/Installation_Docker.html#what-do-i-do-if-i-experience-a-port-clash","text":"You may experience a scenario where you have a clash between ports in-use on your host machine and the ports specified in the docker-compose.yml file. Port mappings in the docker-compose.yml file are specified in host:container pairs. You can change the host port in any mapping but be careful to change all occurances of the usage of that host port in other environment variables used in the docker-compose.yml file.","title":"What do I do if I experience a port clash?"},{"location":"Installation/Installation_Docker.html#connecting-to-databases-on-docker-host-machine","text":"To connect a container to a local database running on the Docker host machine, ensure you have configured the following: Enable remote connections to the database Enable firewall rule to allow connection using the configured port number Use the Docker network adapter IP address for connection strings","title":"Connecting to Databases on Docker Host Machine"},{"location":"Installation/Installation_IIS.html","text":"The IdentityExpress Admin UI consists of two sites: the UI, and the backend API. These then integrate with an IdentityServer installation for authentication and authorization AdminUI Deployment AdminUI is deployed as 2 separate IIS Applications - one for the UI website and one for the API website. It is envisaged that they will be configured to communicate with your existing (external) identity server. Prerequisites Before beginning the installation, please ensure that you have IIS, the .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed. You will also need an IdentityServer4 Installation and either a MySql or SqlServer Database set up. There is a sample IdentityServer avaliable here that is already integrated with our IdentityExpress.Identity schema. Walkthrough If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire IIS configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema. Configure a Database AdminUI currently only supports MySql, PostgreSQL and SqlServer. This also includes SqlExpress. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports. Create IIS Websites Initially you will want to create 2 IIS Websites pointing at the folders we have provided in the emails. This will be one site for the UI front end, and another for backend API. Once created you need to configure the applications for run no managed code. You can do this by going to Application Pools - [Website Name] - Basic Settings - Change .NET CLR Version to No Managed Code. AdminAPI Configuration Once you have a Website Setup for the API, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the API are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants). AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). There are 2 ways to configure these variables. Either by going to the website in IIS and using the Configuration Editor - Environment Variables Page and adding them one by one. Or by going directly to the web.config in the folder provided and adding these variables underneath the AspnetCore node. (note: the variables surrounded with ** will need to be changed): environmentVariables environmentVariable name= DbProvider value= **SqlServer** / environmentVariable name= IdentityConnectionString value= **ConnectionString** / environmentVariable name= IdentityServerConnectionString value= **ConnectionString** / environmentVariable name= UiUrl value= **UiURL** / environmentVariable name= AuthorityUrl value= **IdentityServer URL** / environmentVariable name= RequireHttpsMetadata value= **false** / environmentVariable name= RunIdentityServerMigrations value= **true** / environmentVariable name= LicenseKey value= **Your Licence Key** / /environmentVariables For a full list of configuration settings, see Configuring AdminUI . AdminUI Configuration Once you have a Website Setup for the UI, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the UI are: AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend ApiUrl Url of the API setup in the previous step For the UI there is an extra configuration step needed after the Web.Config has been changed. There are 2 ways to configure these variables. Either by going to the website in IIS and under Management using the Configuration Editor - Environment Varialblages Page and adding them one by one. Or by going directly to the web.config in the folder provided and adding these variables underneath the AspnetCore node. (note: the variables surrounded with ** will need to be changed): environmentVariables environmentVariable name= UiUrl value= **Url Of this Website** / environmentVariable name= AuthorityUrl value= **IdentityServer URL** / environmentVariable name= ApiUrl value=**Api Setup in the Previous Step** / /environmentVariables Once you have configured these variables you will need to navigate to the provided folder and edit the env.js file in wwwroot/assets. The variables in this will need to match the variables above: var ENV = { AuthorityUrl: '**Identity Server Url Here**', UiUrl: '**Url of this website**', ApiUrl: '**Url Setup in the previous step**' }; Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI API site is and run the following command. dotnet IdentityExpress.Manager.Api.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI API web.config. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here Troubleshooting If you're having issues, we recommend you first enable logging for the API site .","title":"IIS"},{"location":"Installation/Installation_IIS.html#adminui-deployment","text":"AdminUI is deployed as 2 separate IIS Applications - one for the UI website and one for the API website. It is envisaged that they will be configured to communicate with your existing (external) identity server.","title":"AdminUI Deployment"},{"location":"Installation/Installation_IIS.html#prerequisites","text":"Before beginning the installation, please ensure that you have IIS, the .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed. You will also need an IdentityServer4 Installation and either a MySql or SqlServer Database set up. There is a sample IdentityServer avaliable here that is already integrated with our IdentityExpress.Identity schema.","title":"Prerequisites"},{"location":"Installation/Installation_IIS.html#walkthrough","text":"If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire IIS configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema.","title":"Walkthrough"},{"location":"Installation/Installation_IIS.html#configure-a-database","text":"AdminUI currently only supports MySql, PostgreSQL and SqlServer. This also includes SqlExpress. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports.","title":"Configure a Database"},{"location":"Installation/Installation_IIS.html#create-iis-websites","text":"Initially you will want to create 2 IIS Websites pointing at the folders we have provided in the emails. This will be one site for the UI front end, and another for backend API. Once created you need to configure the applications for run no managed code. You can do this by going to Application Pools - [Website Name] - Basic Settings - Change .NET CLR Version to No Managed Code.","title":"Create IIS Websites"},{"location":"Installation/Installation_IIS.html#adminapi-configuration","text":"Once you have a Website Setup for the API, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the API are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources grants). AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). There are 2 ways to configure these variables. Either by going to the website in IIS and using the Configuration Editor - Environment Variables Page and adding them one by one. Or by going directly to the web.config in the folder provided and adding these variables underneath the AspnetCore node. (note: the variables surrounded with ** will need to be changed): environmentVariables environmentVariable name= DbProvider value= **SqlServer** / environmentVariable name= IdentityConnectionString value= **ConnectionString** / environmentVariable name= IdentityServerConnectionString value= **ConnectionString** / environmentVariable name= UiUrl value= **UiURL** / environmentVariable name= AuthorityUrl value= **IdentityServer URL** / environmentVariable name= RequireHttpsMetadata value= **false** / environmentVariable name= RunIdentityServerMigrations value= **true** / environmentVariable name= LicenseKey value= **Your Licence Key** / /environmentVariables For a full list of configuration settings, see Configuring AdminUI .","title":"AdminAPI Configuration"},{"location":"Installation/Installation_IIS.html#adminui-configuration","text":"Once you have a Website Setup for the UI, you will need to add some variables to the site in order to get it to run. The variables to be aware of for the UI are: AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend ApiUrl Url of the API setup in the previous step For the UI there is an extra configuration step needed after the Web.Config has been changed. There are 2 ways to configure these variables. Either by going to the website in IIS and under Management using the Configuration Editor - Environment Varialblages Page and adding them one by one. Or by going directly to the web.config in the folder provided and adding these variables underneath the AspnetCore node. (note: the variables surrounded with ** will need to be changed): environmentVariables environmentVariable name= UiUrl value= **Url Of this Website** / environmentVariable name= AuthorityUrl value= **IdentityServer URL** / environmentVariable name= ApiUrl value=**Api Setup in the Previous Step** / /environmentVariables Once you have configured these variables you will need to navigate to the provided folder and edit the env.js file in wwwroot/assets. The variables in this will need to match the variables above: var ENV = { AuthorityUrl: '**Identity Server Url Here**', UiUrl: '**Url of this website**', ApiUrl: '**Url Setup in the previous step**' };","title":"AdminUI Configuration"},{"location":"Installation/Installation_IIS.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI API site is and run the following command. dotnet IdentityExpress.Manager.Api.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI API web.config. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Installation/Installation_IIS.html#troubleshooting","text":"If you're having issues, we recommend you first enable logging for the API site .","title":"Troubleshooting"},{"location":"Installation/Installer_Walkthrough.html","text":"Installation Types There are two flows for installation Typical, where we will handle some of the configuration for you, and Advanced, where you can configure all avaliable options. For first time, or demo, users we recommend using typical installation. You will then get the option to install our demo IdentityServer example alongside AdminUI, this is recommended for first time demo users looking to get AdminUI up and running quickly. If you have selected to install our demo IdentityServer example, then you will be asked to select a install location for it. IIS will need permissions to access the files in this location. Required Configuration Whether or not you are installing the example IdentityServer, you will need to set the following configuration for AdminUI IdentityServer Authority Url: The URL that your existing IdentityServer is running on, or the URL you want the demo IdentityServer example to run on. Database provider: The database provider that you are using, avaliable options are SqlServer, MySql and PostgreSql IdentityServer connection string: The connection string to the database containing your IdentityServer configuration, if this database doesnt exist it will be created during the migration step later in the installer. Identity Connection string (Optional): An optional connection string for your Identity (users) database. Will default to your IdentityServer connection string. Audit Configuration (Advanced Only) Audit configuration, only avaliable during advanced installation. Audit read actions: Whether or not to audit read actions within AdminUI, for example when a user views a client through AdminUI. Defaults to false for typical installation. Audit culture: The language that the audit messages are generated in. Defaults to English (en-GB) for typical installation. Seperate audit connection string: An optional seperate connection string for storing audit messages. Defaults to your IdentityServer connection string on a typical installation. AdminUI Installer The AdminUI installation will then begin. You will need to accept our terms and conditions before continuing. Enter your AdminUI license key here, if you dont have a license key, you can request a demo from here You will then need to setup the following settings for the AdminUI IIS sites. AdminUI website url: The URL for the AdminUI UI site, will be added as a binding for the site in IIS AdminUI website name: The IIS website name for AdminUI UI site. AdminApi website url: The URL for the AdminUI API site, will be added as a binding for the site in IIS AdminApi website name: The IIS website name for AdminUI API site. The install location for AdminUI, IIS will need permissions to access the files in this location. Configuration for logging within AdminUI Enable logging for the AdminUI API?: Set whether or not to enable logging within AdminUI, enabled by default. Folder to output logs to: The location to log to, IIS will need permission to read and write files at this location. Click install to continue installation Migrations Once installation is complete, you will need to migrate your databases, you can configure which databases you want us to migrate for you. In your connection string, your user as will need to have the appropriate permissions to create and update databases. Optionally you can also skip migrations at this point and handle migrations yourself, more info on our migrations is avaliable here If you select the Advanced option here, you can manually set each connection string to change the user you are migrating as. We will then attempt to run migrations, any errors that occur will appear here for each migration. If you run migrations you may now need to restart your API site to reconnect to the created databases, and complete the setup of AdminUI. Installation Complete Your AdminUI installation should now be complete, you can click one of the below links to navigate to the created sites or to see our documentation. If you have encounted any issues during installation, dont hesitate to contact us at support@identityserver.com","title":"Installer"},{"location":"Installation/Installer_Walkthrough.html#installation-types","text":"There are two flows for installation Typical, where we will handle some of the configuration for you, and Advanced, where you can configure all avaliable options. For first time, or demo, users we recommend using typical installation. You will then get the option to install our demo IdentityServer example alongside AdminUI, this is recommended for first time demo users looking to get AdminUI up and running quickly. If you have selected to install our demo IdentityServer example, then you will be asked to select a install location for it. IIS will need permissions to access the files in this location.","title":"Installation Types"},{"location":"Installation/Installer_Walkthrough.html#required-configuration","text":"Whether or not you are installing the example IdentityServer, you will need to set the following configuration for AdminUI IdentityServer Authority Url: The URL that your existing IdentityServer is running on, or the URL you want the demo IdentityServer example to run on. Database provider: The database provider that you are using, avaliable options are SqlServer, MySql and PostgreSql IdentityServer connection string: The connection string to the database containing your IdentityServer configuration, if this database doesnt exist it will be created during the migration step later in the installer. Identity Connection string (Optional): An optional connection string for your Identity (users) database. Will default to your IdentityServer connection string.","title":"Required Configuration"},{"location":"Installation/Installer_Walkthrough.html#audit-configuration-advanced-only","text":"Audit configuration, only avaliable during advanced installation. Audit read actions: Whether or not to audit read actions within AdminUI, for example when a user views a client through AdminUI. Defaults to false for typical installation. Audit culture: The language that the audit messages are generated in. Defaults to English (en-GB) for typical installation. Seperate audit connection string: An optional seperate connection string for storing audit messages. Defaults to your IdentityServer connection string on a typical installation.","title":"Audit Configuration (Advanced Only)"},{"location":"Installation/Installer_Walkthrough.html#adminui-installer","text":"The AdminUI installation will then begin. You will need to accept our terms and conditions before continuing. Enter your AdminUI license key here, if you dont have a license key, you can request a demo from here You will then need to setup the following settings for the AdminUI IIS sites. AdminUI website url: The URL for the AdminUI UI site, will be added as a binding for the site in IIS AdminUI website name: The IIS website name for AdminUI UI site. AdminApi website url: The URL for the AdminUI API site, will be added as a binding for the site in IIS AdminApi website name: The IIS website name for AdminUI API site. The install location for AdminUI, IIS will need permissions to access the files in this location. Configuration for logging within AdminUI Enable logging for the AdminUI API?: Set whether or not to enable logging within AdminUI, enabled by default. Folder to output logs to: The location to log to, IIS will need permission to read and write files at this location. Click install to continue installation","title":"AdminUI Installer"},{"location":"Installation/Installer_Walkthrough.html#migrations","text":"Once installation is complete, you will need to migrate your databases, you can configure which databases you want us to migrate for you. In your connection string, your user as will need to have the appropriate permissions to create and update databases. Optionally you can also skip migrations at this point and handle migrations yourself, more info on our migrations is avaliable here If you select the Advanced option here, you can manually set each connection string to change the user you are migrating as. We will then attempt to run migrations, any errors that occur will appear here for each migration. If you run migrations you may now need to restart your API site to reconnect to the created databases, and complete the setup of AdminUI.","title":"Migrations"},{"location":"Installation/Installer_Walkthrough.html#installation-complete","text":"Your AdminUI installation should now be complete, you can click one of the below links to navigate to the created sites or to see our documentation. If you have encounted any issues during installation, dont hesitate to contact us at support@identityserver.com","title":"Installation Complete"},{"location":"Migrations/Migrations_Help.html","text":"AdminUI Migrations AdminUI comes with a tool to run all the necessary migrations. Alongside its own migrations, AdminUI can optionally run and maintain your IdentityServer4 and or Identity migrations, or you can handle them yourself. If you own SAML2P or WS-Fed, and wish to use its respective features within AdminUI, you will need to run their migrations. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.Api.dll you can you run the dll using dotnet IdentityExpress.Manager.Api.dll -migrate migration-to-run AdminUI has a number of different migrations that need to be run, you can run one individually or choose to run them all at once. The different migrations options are: Migration Type Description All Runs all the migrations (Recommended for Demo users) Configuration IdentityServer4 Configuration Migration ExtendedConfiguration AdminUI IdentityServer4 extension Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration Saml SAML2P Component migration WsFed Ws-Federation Component migration A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in the Api\u2019s webconfig for the values. If you are using SqlServer 2008 or earlier you will need to set - uselegacypaging to true Docker Migrations If you would like to run migrations in docker you must have the container running so you can access the correct .dll file and use the correct environment variables. For a docker user to access this dll you can exec the command from outside the container. The steps to do this are as follows: If the API container is not running, start up the container. Find the container ID by running the \u201cdocker container ps\u201d command Once found, you can exec the command as follows: docker exec container-id dotnet IdentityExpress.Manager.Api.dll -migrations all You will see the output of the migrations in your command line window.","title":"Migrations"},{"location":"Migrations/Migrations_Help.html#adminui-migrations","text":"AdminUI comes with a tool to run all the necessary migrations. Alongside its own migrations, AdminUI can optionally run and maintain your IdentityServer4 and or Identity migrations, or you can handle them yourself. If you own SAML2P or WS-Fed, and wish to use its respective features within AdminUI, you will need to run their migrations. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.Api.dll you can you run the dll using dotnet IdentityExpress.Manager.Api.dll -migrate migration-to-run AdminUI has a number of different migrations that need to be run, you can run one individually or choose to run them all at once. The different migrations options are: Migration Type Description All Runs all the migrations (Recommended for Demo users) Configuration IdentityServer4 Configuration Migration ExtendedConfiguration AdminUI IdentityServer4 extension Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration Saml SAML2P Component migration WsFed Ws-Federation Component migration A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in the Api\u2019s webconfig for the values. If you are using SqlServer 2008 or earlier you will need to set - uselegacypaging to true","title":"AdminUI Migrations"},{"location":"Migrations/Migrations_Help.html#docker-migrations","text":"If you would like to run migrations in docker you must have the container running so you can access the correct .dll file and use the correct environment variables. For a docker user to access this dll you can exec the command from outside the container. The steps to do this are as follows: If the API container is not running, start up the container. Find the container ID by running the \u201cdocker container ps\u201d command Once found, you can exec the command as follows: docker exec container-id dotnet IdentityExpress.Manager.Api.dll -migrations all You will see the output of the migrations in your command line window.","title":"Docker Migrations"},{"location":"Read_First/Installation_Scenarios.html","text":"Installation Scenarios I have neither IdentityServer or AdminUI installed See here for a introduction to IdentityServer and where AdminUI fits in. If you havent already requested a demo, you can get one from here where you will recieve a download link for AdminUI plus a 30 day demo license key. For IdentityServer, we recommend using our quickstart , that is already integrated with AdminUI. You can then follow one of the walkthroughs below to install AdminUI IIS Azure Docker I have IdentityServer4 2.2 or below and no installation of AdminUI You will need to migrate the database to the 2.3 schema. The simplest way is to upgrade your IdentityServer packages to 2.3 and generate the migrations, you can find out more on generating your own IdentityServer migrations here . I have IdentityServer4 2.0 - 2.2 and AdminUI 2.0 - 2.3 installed If you previously requested that AdminUI run the IdentityServer migrations then then run the migrate all command, otherwise, you will need to upgrade your IdentityServer4 to 2.3 and generate your own migrations. I have IdentityServer4 2.3-2.4 installed and no AdminUI Install AdminUI 2.4, and run all migrations but the IdentityServer migration, see below. I have IdentityServer4 2.3-2.4 installed and AdminUI 2.3 installed Install AdminUI 2.4, update your configuration, and then run the migrate all command, see below. Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI API site is and run the following command. dotnet IdentityExpress.Manager.Api.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI API web.config. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Installation Scenarios"},{"location":"Read_First/Installation_Scenarios.html#installation-scenarios","text":"","title":"Installation Scenarios"},{"location":"Read_First/Installation_Scenarios.html#i-have-neither-identityserver-or-adminui-installed","text":"See here for a introduction to IdentityServer and where AdminUI fits in. If you havent already requested a demo, you can get one from here where you will recieve a download link for AdminUI plus a 30 day demo license key. For IdentityServer, we recommend using our quickstart , that is already integrated with AdminUI. You can then follow one of the walkthroughs below to install AdminUI IIS Azure Docker","title":"I have neither IdentityServer or AdminUI installed"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-22-or-below-and-no-installation-of-adminui","text":"You will need to migrate the database to the 2.3 schema. The simplest way is to upgrade your IdentityServer packages to 2.3 and generate the migrations, you can find out more on generating your own IdentityServer migrations here .","title":"I have IdentityServer4 2.2 or below and no installation of AdminUI"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-20-22-and-adminui-20-23-installed","text":"If you previously requested that AdminUI run the IdentityServer migrations then then run the migrate all command, otherwise, you will need to upgrade your IdentityServer4 to 2.3 and generate your own migrations.","title":"I have IdentityServer4 2.0 - 2.2 and AdminUI 2.0 - 2.3 installed"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-23-24-installed-and-no-adminui","text":"Install AdminUI 2.4, and run all migrations but the IdentityServer migration, see below.","title":"I have IdentityServer4 2.3-2.4 installed and no AdminUI"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-23-24-installed-and-adminui-23-installed","text":"Install AdminUI 2.4, update your configuration, and then run the migrate all command, see below.","title":"I have IdentityServer4 2.3-2.4 installed and AdminUI 2.3 installed"},{"location":"Read_First/Installation_Scenarios.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI API site is and run the following command. dotnet IdentityExpress.Manager.Api.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI API web.config. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Resources/Resources.html","text":"To access the Resources section, either select a drop-down from the Resources tab (IdentityResources or ProtectedResources) in the AdminUI application: Or navigate to the /identityresources or /protectedresources route. Now you are able to carry out further Resource Administrative tasks.","title":"Resources"},{"location":"Resources/creating_resources.html","text":"Create Resource To create a Resource, use the Add button on either an Identity or Protected Resource type. A new Resource dialog will appear, enabling you to add the Basic Resource Details you require ID , Display Name and Description Once basic details are complete, you can choose which claim types can be included for that resource: Protected Resources Scopes By default, when creating a Protected Resource, two scopes will automatically be created Read Write . These can later be modified or removed completely.","title":"Creating Resources"},{"location":"Resources/creating_resources.html#create-resource","text":"To create a Resource, use the Add button on either an Identity or Protected Resource type. A new Resource dialog will appear, enabling you to add the Basic Resource Details you require ID , Display Name and Description Once basic details are complete, you can choose which claim types can be included for that resource:","title":"Create Resource"},{"location":"Resources/creating_resources.html#protected-resources-scopes","text":"By default, when creating a Protected Resource, two scopes will automatically be created Read Write . These can later be modified or removed completely.","title":"Protected Resources &amp; Scopes"},{"location":"Resources/disabling_resources.html","text":"Disabling Resources When in the Details tab of a selected Resource, you can disable/enable the Resource via the switch button. The default status is enabled: Press the switch to set it to disabled: Save You will need to save in order to persist these changes","title":"Disabling Resources"},{"location":"Resources/disabling_resources.html#disabling-resources","text":"When in the Details tab of a selected Resource, you can disable/enable the Resource via the switch button. The default status is enabled: Press the switch to set it to disabled:","title":"Disabling Resources"},{"location":"Resources/disabling_resources.html#save","text":"You will need to save in order to persist these changes","title":"Save"},{"location":"Resources/editing_resources.html","text":"Resources can be edited from the Protected or Identity Resources page by first selecting the edit icon on the Resource item row: Identity Resources Edit Mode Once you are in edit mode for an Identity Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description , and a Resource Status switch. You will also be able to to set various statuses of the Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Protected Resources Edit Mode Once you are in edit mode for a Protected Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description and a Resource Status switch: Protected Resources Scope Editing From the Protected Resources tab, there is the ability to add and edit the Scope of the resource. Select the Scopes tab and you will observe the existing Scopes available for this Protected Resource. By default, Admin API is available as a Scope: At this point, you can switch between the Details and Claims tab. The options on the Details tab show the read-only Scope ID (e.g. \"admin_api\"), and enable you to edit the Display Name and Description . You will also be able to to set various statuses of the Scope for this Protected Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Additionally, from within a Protected Resources Scope Edit mode, you will be able to select the Claims available for this Scope. This sets the User Claim types that are to be included in tokens, and these Claims types will be added to the list of claim types for the parent resource.","title":"Editing resources"},{"location":"Resources/editing_resources.html#identity-resources-edit-mode","text":"Once you are in edit mode for an Identity Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description , and a Resource Status switch. You will also be able to to set various statuses of the Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen","title":"Identity Resources Edit Mode"},{"location":"Resources/editing_resources.html#protected-resources-edit-mode","text":"Once you are in edit mode for a Protected Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description and a Resource Status switch:","title":"Protected Resources Edit Mode"},{"location":"Resources/editing_resources.html#protected-resources-scope-editing","text":"From the Protected Resources tab, there is the ability to add and edit the Scope of the resource. Select the Scopes tab and you will observe the existing Scopes available for this Protected Resource. By default, Admin API is available as a Scope: At this point, you can switch between the Details and Claims tab. The options on the Details tab show the read-only Scope ID (e.g. \"admin_api\"), and enable you to edit the Display Name and Description . You will also be able to to set various statuses of the Scope for this Protected Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Additionally, from within a Protected Resources Scope Edit mode, you will be able to select the Claims available for this Scope. This sets the User Claim types that are to be included in tokens, and these Claims types will be added to the list of claim types for the parent resource.","title":"Protected Resources Scope Editing"},{"location":"Resources/searching_for_resources.html","text":"Starting from the Identity Resources or Protected Resources tab, you can find Resources using the Search functionality. Select the resource type you would like (e.g. Identity or Protected), start typing and the Resource will appear if there is a match. Note that this functionality is the same process for both Identity Resources, and Protected Resources: Successful Resources Find You should be able to easily find the Resources you require using the functionality described above","title":"Searching for Resources"},{"location":"Resources/searching_for_resources.html#successful-resources-find","text":"You should be able to easily find the Resources you require using the functionality described above","title":"Successful Resources Find"},{"location":"Roles/Creating_roles.html","text":"Roles can be created in AdminUI in order to create the roles you need within your application. By clicking \"Add Role\", we can create a new role within the AdminUI application. Add New Role Selecting this button will bring up a window to enable you to add a new role. There is a simple Name and Description field, and the option to either Add directly, or Add another Role after Submit. Adding another role after submit simply shows a blank version of the New Role window. Success! If the role has been successfully added, a success dialogue will display.","title":"Creating Roles"},{"location":"Roles/Creating_roles.html#add-new-role","text":"Selecting this button will bring up a window to enable you to add a new role. There is a simple Name and Description field, and the option to either Add directly, or Add another Role after Submit. Adding another role after submit simply shows a blank version of the New Role window.","title":"Add New Role"},{"location":"Roles/Creating_roles.html#success","text":"If the role has been successfully added, a success dialogue will display.","title":"Success!"},{"location":"Roles/Deleting_Roles.html","text":"During the Edit Roles dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this role. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting Roles"},{"location":"Roles/Editing_Roles.html","text":"Roles can be edited within AdminUI in order to edit the roles already setup in your application. By clicking the pencil icon, an Edit dialogue will appear enabling us to customise the role within the AdminUI application. Discard Changes When continuing from the page without saving, you will be warned via a dialogue as to whether you should discard changes. Saving Changes Once you have made the edits you require, click \"Save\" to persist the changes to the Role you have saved. If the changes have been saved as required, you will observe a \"Changes Saved\" dialogue appear.","title":"Editing Roles"},{"location":"Roles/Editing_Roles.html#discard-changes","text":"When continuing from the page without saving, you will be warned via a dialogue as to whether you should discard changes.","title":"Discard Changes"},{"location":"Roles/Editing_Roles.html#saving-changes","text":"Once you have made the edits you require, click \"Save\" to persist the changes to the Role you have saved. If the changes have been saved as required, you will observe a \"Changes Saved\" dialogue appear.","title":"Saving Changes"},{"location":"Roles/Roles.html","text":"To access the Roles section, either select \"Manage Roles\" from the Homepage of the Admin UI application: Or, browse to the Roles tab in the AdminUI application: Now you are able to carry out further Roles Administrative tasks","title":"Roles"},{"location":"Roles/Searching_for_Roles.html","text":"Searching for Roles within Admin UI is a powerful way to quickly find and manage the Roles within the application. You can find Roles in the application in several ways, starting with the Search functionality. Start typing and the role will appear if there is a match. No Roles Found If no Roles are present, an informative message will show this: Successful Role Find You should be able to easily find the Role you require using the functionality described above","title":"Searching for Roles"},{"location":"Roles/Searching_for_Roles.html#no-roles-found","text":"If no Roles are present, an informative message will show this:","title":"No Roles Found"},{"location":"Roles/Searching_for_Roles.html#successful-role-find","text":"You should be able to easily find the Role you require using the functionality described above","title":"Successful Role Find"},{"location":"User_settings_endpoints/authorisation.html","text":"Scopes To access the user settings endpoints, an access token issued by your IdentityServer implementation with the scope admin_ui_public . This access token must have been issued on behalf of a user and contain a sub claim. Authorization Rules In order to use the user settings endpoints, the requesting user, must be the same as the users being updated. Otherwise, a 403 Forbidden will be returned. This is matched using the sub claim issued within the requesting access token.","title":"Authorisation"},{"location":"User_settings_endpoints/authorisation.html#scopes","text":"To access the user settings endpoints, an access token issued by your IdentityServer implementation with the scope admin_ui_public . This access token must have been issued on behalf of a user and contain a sub claim.","title":"Scopes"},{"location":"User_settings_endpoints/authorisation.html#authorization-rules","text":"In order to use the user settings endpoints, the requesting user, must be the same as the users being updated. Otherwise, a 403 Forbidden will be returned. This is matched using the sub claim issued within the requesting access token.","title":"Authorization Rules"},{"location":"User_settings_endpoints/endpoints.html","text":"Read To see what claims a user can edit, and their current values, you can call GET on the /UserSettings/{subject} endpoint. This will return the following json: subject : string , claims : type : string , value : string Update To update a users claims, you can call PUT on the /UserSettings endpoint. subject : string , claims : type : string , value : string","title":"Endpoints"},{"location":"User_settings_endpoints/endpoints.html#read","text":"To see what claims a user can edit, and their current values, you can call GET on the /UserSettings/{subject} endpoint. This will return the following json: subject : string , claims : type : string , value : string","title":"Read"},{"location":"User_settings_endpoints/endpoints.html#update","text":"To update a users claims, you can call PUT on the /UserSettings endpoint. subject : string , claims : type : string , value : string","title":"Update"},{"location":"Users/Adding_users.html","text":"From the Users page, click the \"Add a User\" button User Details Fill out the relevant User Details including: Username Email First Name Last Name Organisation User Validation You will not be able to add a new user until the required field validation has passed. Add Another User At this point, you can use whether to continue or to add another user. The default is not to add another user after adding the first user. If you would like to add another user straight after the current user, slide the switch to \"Add Another User\" and a fresh dialogue will appear once you have clicked \"Add\": Add Configure Once you have successfully entered all required information, you will be able to choose whether to \"Add\" or \"Add and Configure\" this User. Selecting \"Add\" will take you back to the Users screen, selecting \"Add and Configure\" will take you to the User details configuration screen to edit the user. Success You have now successfully added a user. If successful, you should see a Success notification, or you will be informed of any issues.","title":"Adding Users"},{"location":"Users/Adding_users.html#user-details","text":"Fill out the relevant User Details including: Username Email First Name Last Name Organisation","title":"User Details"},{"location":"Users/Adding_users.html#user-validation","text":"You will not be able to add a new user until the required field validation has passed.","title":"User Validation"},{"location":"Users/Adding_users.html#add-another-user","text":"At this point, you can use whether to continue or to add another user. The default is not to add another user after adding the first user. If you would like to add another user straight after the current user, slide the switch to \"Add Another User\" and a fresh dialogue will appear once you have clicked \"Add\":","title":"Add Another User"},{"location":"Users/Adding_users.html#add-configure","text":"Once you have successfully entered all required information, you will be able to choose whether to \"Add\" or \"Add and Configure\" this User. Selecting \"Add\" will take you back to the Users screen, selecting \"Add and Configure\" will take you to the User details configuration screen to edit the user.","title":"Add &amp; Configure"},{"location":"Users/Adding_users.html#success","text":"You have now successfully added a user. If successful, you should see a Success notification, or you will be informed of any issues.","title":"Success"},{"location":"Users/Deleting_Users.html","text":"If you choose to delete a user from the User Details page, click the delete button. You should then see a dialogue warning you that you are going to delete the user. At this point you can either cancel, or continue with the delete. Confirmation of Delete If the deletion of a user has been successful, a \"user deleted\" confirmation will appear","title":"Deleting Users"},{"location":"Users/Deleting_Users.html#confirmation-of-delete","text":"If the deletion of a user has been successful, a \"user deleted\" confirmation will appear","title":"Confirmation of Delete"},{"location":"Users/Editing_users.html","text":"User Details Access the User Details screen by finding the user that you want to edit in the Users page list. Edit User Once you have found your required user, click the pencil at the end of the row User Details This will take you to the User Details screen, where you can edit the required User details. You will notice that there are several key tabs, which we will cover in detail. Details Tab The default tab is the \"Details\" tab, where you will see the User ID, and be able to edit the following elements of a user: Username First name Last name Email Organization Any additional, custom required claims you have created You will also be able to set a user to \"Blocked\" or remove their blocked status and set them to \"Active\" again. There is the option to Save the updated changes, or to Delete the user, which will be covered in more detail. Unsaved Changes At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes. Successful User Details Edit Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Additional Details list immediately.","title":"Editing Users"},{"location":"Users/Editing_users.html#user-details","text":"Access the User Details screen by finding the user that you want to edit in the Users page list.","title":"User Details"},{"location":"Users/Editing_users.html#edit-user","text":"Once you have found your required user, click the pencil at the end of the row","title":"Edit User"},{"location":"Users/Editing_users.html#user-details_1","text":"This will take you to the User Details screen, where you can edit the required User details. You will notice that there are several key tabs, which we will cover in detail.","title":"User Details"},{"location":"Users/Editing_users.html#details-tab","text":"The default tab is the \"Details\" tab, where you will see the User ID, and be able to edit the following elements of a user: Username First name Last name Email Organization Any additional, custom required claims you have created You will also be able to set a user to \"Blocked\" or remove their blocked status and set them to \"Active\" again. There is the option to Save the updated changes, or to Delete the user, which will be covered in more detail.","title":"Details Tab"},{"location":"Users/Editing_users.html#unsaved-changes","text":"At this point, if you attempt to progress or switch tabs without saving any edits, you will be shown a warning dialogue to ensure that you don't lose important changes.","title":"Unsaved Changes"},{"location":"Users/Editing_users.html#successful-user-details-edit","text":"Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Additional Details list immediately.","title":"Successful User Details Edit"},{"location":"Users/Searching_for_users.html","text":"You can find Users in the application in several ways, starting with the Search functionality. Start entering the name of the user that you wish to search for, and options should appear as users matching the search are found: User Ordering You can also find Users by ordering the columns to get to the user you require. This can be achieved by clicking the caret on each column. The caret will alter to indicate the direction of the sort: User Selection by Status Users can be one of 3 statuses Active , Blocked or Deleted On the Users page, it is possible to sort users by their status by clicking on the relevant Status tab. This will filter out all users that are not of that status type. Pagination You can choose how many users to display on a page by selecting the number of users to show per page at the top of the Users list: Once you have reached above the number of users to show on a page, you will be able to page between the users using the pagination arrows and links at the foot of the Users list: No Users Found by Filter If no users are found by one of the filtered tabs, an informative message will show this: Successful User Find You should be able to easily find a User using the functionality described above.","title":"Searching for Users"},{"location":"Users/Searching_for_users.html#user-ordering","text":"You can also find Users by ordering the columns to get to the user you require. This can be achieved by clicking the caret on each column. The caret will alter to indicate the direction of the sort:","title":"User Ordering"},{"location":"Users/Searching_for_users.html#user-selection-by-status","text":"Users can be one of 3 statuses Active , Blocked or Deleted On the Users page, it is possible to sort users by their status by clicking on the relevant Status tab. This will filter out all users that are not of that status type.","title":"User Selection by Status"},{"location":"Users/Searching_for_users.html#pagination","text":"You can choose how many users to display on a page by selecting the number of users to show per page at the top of the Users list: Once you have reached above the number of users to show on a page, you will be able to page between the users using the pagination arrows and links at the foot of the Users list:","title":"Pagination"},{"location":"Users/Searching_for_users.html#no-users-found-by-filter","text":"If no users are found by one of the filtered tabs, an informative message will show this:","title":"No Users Found by Filter"},{"location":"Users/Searching_for_users.html#successful-user-find","text":"You should be able to easily find a User using the functionality described above.","title":"Successful User Find"},{"location":"Users/Set_User_Password.html","text":"Evaluating AdminUI If you are using a demo license key, when you create a user we give you the ability to set a password for that user. We do this to simplify the creation of users while you are evaluating the product. However, we do not recommend this for production installations . In production When you are using a production key we do not give you the ability to set a password for the user on the Add User screen by default. Our recommendation is to use an email flow for the user to set their own password. You can enable this via a webhook as explained here . However, if, in your situation, you do want to enable the ability for an administrator to set the password for a new user, you can turn on this feature with the AddUserPassword as documented here","title":"Setting a user's password"},{"location":"Users/Set_User_Password.html#evaluating-adminui","text":"If you are using a demo license key, when you create a user we give you the ability to set a password for that user. We do this to simplify the creation of users while you are evaluating the product. However, we do not recommend this for production installations .","title":"Evaluating AdminUI"},{"location":"Users/Set_User_Password.html#in-production","text":"When you are using a production key we do not give you the ability to set a password for the user on the Add User screen by default. Our recommendation is to use an email flow for the user to set their own password. You can enable this via a webhook as explained here . However, if, in your situation, you do want to enable the ability for an administrator to set the password for a new user, you can turn on this feature with the AddUserPassword as documented here","title":"In production"},{"location":"Users/User_Claims.html","text":"Claim Types are explained in more detail in the Claim Types documentation. Additional Details Tab Within the User Details page, clicking on the Additional Details tab enables you to add relevant additional optional user details, known as Claims . By adding claims via the Users tab, you can assign and remove claims for a specific user. Viewing Individual User Claims In the Additional Details tab, you be able to add Claims for the new user. These are initially empty. Adding Claims to a User Adding claims to a user can be achieved via the Additional Details tab on the User Details page. Click on the \"Select a Type\" drop-down to show the full list of User claim types. You will see a set of claims added by default, from which you can make a selection. Choose the required claim, enter a value for it, and click the plus symbol to add this claim. Successful Claim Addition You should now see a success dialogue informing you that your claim has been added, and your new claim should now appear in the Additional Details list. Edit User Claim You can choose to edit or delete any claim from this Additional Details tab. Click the pencil icon to edit the claim, or the delete icon to remove the claim entirely from this user. Editing the claim will turn the field into a writeable text-box that will allow you to change the name of the claim: Delete User Claim Choosing to delete the claim will immediately remove the claim entirely from the user's claim list.","title":"User Claims"},{"location":"Users/User_Claims.html#additional-details-tab","text":"Within the User Details page, clicking on the Additional Details tab enables you to add relevant additional optional user details, known as Claims . By adding claims via the Users tab, you can assign and remove claims for a specific user.","title":"Additional Details Tab"},{"location":"Users/User_Claims.html#viewing-individual-user-claims","text":"In the Additional Details tab, you be able to add Claims for the new user. These are initially empty.","title":"Viewing Individual User Claims"},{"location":"Users/User_Claims.html#adding-claims-to-a-user","text":"Adding claims to a user can be achieved via the Additional Details tab on the User Details page. Click on the \"Select a Type\" drop-down to show the full list of User claim types. You will see a set of claims added by default, from which you can make a selection. Choose the required claim, enter a value for it, and click the plus symbol to add this claim.","title":"Adding Claims to a User"},{"location":"Users/User_Claims.html#successful-claim-addition","text":"You should now see a success dialogue informing you that your claim has been added, and your new claim should now appear in the Additional Details list.","title":"Successful Claim Addition"},{"location":"Users/User_Claims.html#edit-user-claim","text":"You can choose to edit or delete any claim from this Additional Details tab. Click the pencil icon to edit the claim, or the delete icon to remove the claim entirely from this user. Editing the claim will turn the field into a writeable text-box that will allow you to change the name of the claim:","title":"Edit User Claim"},{"location":"Users/User_Claims.html#delete-user-claim","text":"Choosing to delete the claim will immediately remove the claim entirely from the user's claim list.","title":"Delete User Claim"},{"location":"Users/User_applications.html","text":"Clicking on the Applications tab in the User Details page enables you to view all Applications that the selected User has access to. No Applications If there are no applications found for the user, then this will appear in an informative dialogue.","title":"User Applications"},{"location":"Users/User_applications.html#no-applications","text":"If there are no applications found for the user, then this will appear in an informative dialogue.","title":"No Applications"},{"location":"Users/User_roles.html","text":"From within the User Details section, clicking on the Roles tab allows you to assign roles to a User. Roles administration is explained in more detail in the Roles section, however, you can assign Roles to a user from the Users dialogue. Adding Roles to a User You will be shown the Available Roles as a searchable list, e.g. IT Administrator. Tick the role or roles you wish to add to a user. Select the arrow to move the roles from Available to Assigned. Removing Roles from a User To remove roles from a user, select the Roles tab and choose the Role you wish to remove. Select the role and click the arrow to move the role from \"Assigned\" to \"Available\". This will remove the role from the User. It can be added again at any time. Successful Role Addition As the change is immediate, there is no success dialogue informing you that your role has been assigned or unassigned, but your role should immediately appear in the Assigned Roles list.","title":"User Roles"},{"location":"Users/User_roles.html#adding-roles-to-a-user","text":"You will be shown the Available Roles as a searchable list, e.g. IT Administrator. Tick the role or roles you wish to add to a user. Select the arrow to move the roles from Available to Assigned.","title":"Adding Roles to a User"},{"location":"Users/User_roles.html#removing-roles-from-a-user","text":"To remove roles from a user, select the Roles tab and choose the Role you wish to remove. Select the role and click the arrow to move the role from \"Assigned\" to \"Available\". This will remove the role from the User. It can be added again at any time.","title":"Removing Roles from a User"},{"location":"Users/User_roles.html#successful-role-addition","text":"As the change is immediate, there is no success dialogue informing you that your role has been assigned or unassigned, but your role should immediately appear in the Assigned Roles list.","title":"Successful Role Addition"},{"location":"Users/Users.html","text":"To access the Users section, either select \"UserManagement\" from the Homepage of the Admin UI application, select the \"Users\" tab, or navigate to the \"/users\" route.","title":"Users"},{"location":"Webhooks/Registration_Confirmation.html","text":"A simple webhook for triggering logic upon a user creation within AdminUI. Configuration To enable the webhook within AdminUI, you must first have configured webhook authorization. Once you have authorization configured, you can set the RegistrationConfirmationEndpoint with the endpoint you AdminUI to call after user creation. Endpoint AdminUI expects your endpoint to meet the following requirements: Accept POST Accept JSON Accept an email in the body The request made by AdminUI will look like the following: Headers Content-Type: application/json Authorization: Bearer xyz Body { email : string }","title":"Registration Confirmation"},{"location":"Webhooks/Registration_Confirmation.html#configuration","text":"To enable the webhook within AdminUI, you must first have configured webhook authorization. Once you have authorization configured, you can set the RegistrationConfirmationEndpoint with the endpoint you AdminUI to call after user creation.","title":"Configuration"},{"location":"Webhooks/Registration_Confirmation.html#endpoint","text":"AdminUI expects your endpoint to meet the following requirements: Accept POST Accept JSON Accept an email in the body The request made by AdminUI will look like the following:","title":"Endpoint"},{"location":"Webhooks/Registration_Confirmation.html#headers","text":"Content-Type: application/json Authorization: Bearer xyz","title":"Headers"},{"location":"Webhooks/Registration_Confirmation.html#body","text":"{ email : string }","title":"Body"},{"location":"Webhooks/authorisation.html","text":"Scope The AdminUI webhooks use the admin_ui_webhooks scope for authorization. To ensure your webhooks are secured against public use, they should check for a bearer token, issued by your IdentityServer installation, that contains this scope. Client To allow the AdminUI webhook functionality to request access tokens, a new client must be created within your IdentityServer. This client should have the following configuration: client_credentials grant type (a machine application within AdminUI) can request the admin_ui_webhooks scope have a client secret You can then configure AdminUI to use this client configuration by configuring the ClientId and ClientSecret settings within the API.","title":"Authorisation"},{"location":"Webhooks/authorisation.html#scope","text":"The AdminUI webhooks use the admin_ui_webhooks scope for authorization. To ensure your webhooks are secured against public use, they should check for a bearer token, issued by your IdentityServer installation, that contains this scope.","title":"Scope"},{"location":"Webhooks/authorisation.html#client","text":"To allow the AdminUI webhook functionality to request access tokens, a new client must be created within your IdentityServer. This client should have the following configuration: client_credentials grant type (a machine application within AdminUI) can request the admin_ui_webhooks scope have a client secret You can then configure AdminUI to use this client configuration by configuring the ClientId and ClientSecret settings within the API.","title":"Client"},{"location":"Webhooks/password_reset.html","text":"Configuration To enable the webhook within AdminUI, you must first have configured webhook authorization. Once you have authorization configured, you can set the PasswordResetEndpoint with the endpoint you AdminUI to call. When this setting has a value, a button on the user edit screen will be enabled, that triggers your password reset endpoint. Endpoint AdminUI expects your endpoint to meet the following requirements: Accept POST Accept JSON Accept an email in the body The request made by AdminUI will look like the following: Headers Content-Type: application/json Authorization: Bearer xyz Body { email : string }","title":"Password Reset"},{"location":"Webhooks/password_reset.html#configuration","text":"To enable the webhook within AdminUI, you must first have configured webhook authorization. Once you have authorization configured, you can set the PasswordResetEndpoint with the endpoint you AdminUI to call. When this setting has a value, a button on the user edit screen will be enabled, that triggers your password reset endpoint.","title":"Configuration"},{"location":"Webhooks/password_reset.html#endpoint","text":"AdminUI expects your endpoint to meet the following requirements: Accept POST Accept JSON Accept an email in the body The request made by AdminUI will look like the following:","title":"Endpoint"},{"location":"Webhooks/password_reset.html#headers","text":"Content-Type: application/json Authorization: Bearer xyz","title":"Headers"},{"location":"Webhooks/password_reset.html#body","text":"{ email : string }","title":"Body"}]}